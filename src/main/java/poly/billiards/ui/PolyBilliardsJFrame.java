/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.billiards.ui;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import poly.billiards.util.XAuth;
import poly.billiards.util.XIcon;
import poly.billiards.util.XUI;
import poly.billiards.util.XDialog;
import java.awt.Color;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import poly.billiards.dao.BillDAO;
import poly.billiards.dao.UserDAO;
import poly.billiards.dao.impl.UserDAOImpl;
import poly.billiards.entity.Bill;
import poly.billiards.entity.Billinfo;
import poly.billiards.entity.Food;
import poly.billiards.entity.FoodCategory;
import poly.billiards.entity.Menu;
import poly.billiards.entity.User;
import poly.billiards.ui.ChatWindowJDialog;
import poly.billiards.ui.manager.FoodCategoryManagerJDialog;
import poly.billiards.ui.manager.FoodManagerJDialog;
import poly.billiards.ui.manager.UserManagerJDialog;
import poly.billiards.util.XDialog;
import poly.billiards.util.XActivity;
import java.util.Map;
import java.util.HashMap;
import java.text.SimpleDateFormat;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collections;
import java.awt.BasicStroke;
import java.awt.event.ItemEvent;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.BorderFactory;
import poly.billiards.dao.BillInfoDAO;
import poly.billiards.dao.FoodCategoryDAO;
import poly.billiards.dao.FoodDAO;
import poly.billiards.dao.MenuDAO;
import poly.billiards.dao.impl.FoodCategoryDAOImpl;
import poly.billiards.dao.impl.FoodDAOImpl;
import poly.billiards.util.XDateHelper;
import poly.billiards.util.XHourlyRateCalculator;

/**
 *
 * @author DELL
 */
public final class PolyBilliardsJFrame extends javax.swing.JFrame implements PolyBilliardsController {

//    private JButton btnChat;
//    private JButton btnActivityHistory;
//    private JButton btnToggleTheme;
//    private JButton btnLogout;
    private User currentUser;
    private XHourlyRateCalculator hourlyRateCalculator;

    // Thêm biến để theo dõi thời gian chơi
    private javax.swing.Timer playTimeTimer;
    private long startTime;
    private boolean isPlaying = false;
    
    // Thêm biến để theo dõi trạng thái dừng/tiếp tục
    private boolean isPaused = false;
    private long pauseTime = 0;
    private long totalPausedTime = 0;

    private DefaultTableModel modelTable;
    FoodCategoryDAO fcatedao = new FoodCategoryDAOImpl() ;

    FoodDAO fdao = new FoodDAOImpl();
    MenuDAO menudao = new MenuDAO();
    BillDAO billdao = new BillDAO();
    BillInfoDAO billifdao = new BillInfoDAO();
    int idtable;
    int count = 0;
    JButton clickbt;

    /**
     * Creates new form AppJFrame
     */
    public PolyBilliardsJFrame() {
        initComponents();
        this.init();
        this.setLocationRelativeTo(null);
        // Thêm Timer để cập nhật thời gian thực
        javax.swing.Timer timer = new javax.swing.Timer(1000, e -> updateTime());
        timer.start();
        updateTime();
    }

    public PolyBilliardsJFrame(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        this.init();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        // Thêm Timer để cập nhật thời gian thực
        javax.swing.Timer timer = new javax.swing.Timer(1000, e -> updateTime());
        timer.start();
        updateTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLeft = new javax.swing.JPanel();
        pnlLeftCenter = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblPhoto = new javax.swing.JLabel();
        lblFullname = new javax.swing.JLabel();
        btnHistory = new javax.swing.JButton();
        pnlManager = new javax.swing.JPanel();
        btnCategoryMgr = new javax.swing.JButton();
        btnCardMgr = new javax.swing.JButton();
        btnUserMgr = new javax.swing.JButton();
        btnDrinkMgr = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnChangePassword = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnChat = new javax.swing.JButton();
        btnActivityHistory = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnToggleTheme = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tabs = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        btnLiber10 = new javax.swing.JButton();
        btnLiber11 = new javax.swing.JButton();
        btnLiber1 = new javax.swing.JButton();
        btnLiber6 = new javax.swing.JButton();
        btnLiber9 = new javax.swing.JButton();
        btnLiber12 = new javax.swing.JButton();
        btnLiber3 = new javax.swing.JButton();
        btnLiber5 = new javax.swing.JButton();
        btnLiber4 = new javax.swing.JButton();
        btnLiber8 = new javax.swing.JButton();
        btnLiber2 = new javax.swing.JButton();
        btnLiber7 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        btnVip2 = new javax.swing.JButton();
        btnVip3 = new javax.swing.JButton();
        btnVip1 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        btnLo1 = new javax.swing.JButton();
        btnLo2 = new javax.swing.JButton();
        btnLo3 = new javax.swing.JButton();
        btnLo4 = new javax.swing.JButton();
        btnLo5 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        txtPhiDichVu = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        snpCount = new javax.swing.JSpinner();
        btnStopContinue = new javax.swing.JButton();
        btnThanhToan = new javax.swing.JButton();
        btnXacNhan = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        btnTamTinh = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        lbTienGio = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        txtTimeStart = new javax.swing.JTextField();
        lbMaHoaDon = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        txtTimeStop = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        lbTable = new javax.swing.JLabel();
        lbDateNow = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lbTongTien = new javax.swing.JLabel();
        cboCategory = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbInfo = new javax.swing.JTable();
        jLabel31 = new javax.swing.JLabel();
        txtPhiKhac = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txtGiamGia = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        cboFood = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        btnXoasp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Poly Billiards");
        setBackground(new java.awt.Color(255, 51, 51));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlLeft.setBackground(new java.awt.Color(255, 153, 102));
        pnlLeft.setLayout(new java.awt.BorderLayout(1, 1));

        pnlLeftCenter.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setOpaque(false);

        lblPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump.png"))); // NOI18N
        lblPhoto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(243, 112, 33), 1, true));

        lblFullname.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblFullname.setForeground(new java.awt.Color(243, 112, 33));
        lblFullname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFullname.setText("Nguyễn Văn Tèo");

        btnHistory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnHistory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/order-history.png"))); // NOI18N
        btnHistory.setText("Lịch sử hoá đơn");
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        pnlManager.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 0), 3, true));
        pnlManager.setOpaque(false);

        btnCategoryMgr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCategoryMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/manager/wine.png"))); // NOI18N
        btnCategoryMgr.setText("Loại đồ ăn");
        btnCategoryMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCategoryMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCategoryMgrActionPerformed(evt);
            }
        });

        btnCardMgr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCardMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/manager/pool-table.png"))); // NOI18N
        btnCardMgr.setText("Bàn");
        btnCardMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCardMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCardMgrActionPerformed(evt);
            }
        });

        btnUserMgr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnUserMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/manager/user.png"))); // NOI18N
        btnUserMgr.setText("Tài khoản");
        btnUserMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUserMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserMgrActionPerformed(evt);
            }
        });

        btnDrinkMgr.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnDrinkMgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/manager/champagne.png"))); // NOI18N
        btnDrinkMgr.setText("Đồ ăn");
        btnDrinkMgr.setPreferredSize(new java.awt.Dimension(200, 60));
        btnDrinkMgr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDrinkMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkMgrActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("QUẢN LÝ");

        javax.swing.GroupLayout pnlManagerLayout = new javax.swing.GroupLayout(pnlManager);
        pnlManager.setLayout(pnlManagerLayout);
        pnlManagerLayout.setHorizontalGroup(
            pnlManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlManagerLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(pnlManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUserMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCategoryMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCardMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDrinkMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        pnlManagerLayout.setVerticalGroup(
            pnlManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCategoryMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDrinkMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUserMgr, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCardMgr)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnChangePassword.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnChangePassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/padlock.png"))); // NOI18N
        btnChangePassword.setText("Đổi mật khẩu");
        btnChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePasswordActionPerformed(evt);
            }
        });

        btnLogout.setBackground(new java.awt.Color(255, 255, 153));
        btnLogout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(0, 0, 0));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/logout.png"))); // NOI18N
        btnLogout.setText("Đăng xuất");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnChat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnChat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/chat (2).png"))); // NOI18N
        btnChat.setText("Chat nội bộ");
        btnChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChatActionPerformed(evt);
            }
        });

        btnActivityHistory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnActivityHistory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/history.png"))); // NOI18N
        btnActivityHistory.setText("Lịch sử thao tác");
        btnActivityHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivityHistoryActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 102, 102));
        btnExit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/switch.png"))); // NOI18N
        btnExit.setText("Kết thúc");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnToggleTheme.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnToggleTheme.setText("Chế độ: Tối");
        btnToggleTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleThemeActionPerformed(evt);
            }
        });

        lblTime.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTime.setText("Giờ là:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel17MouseEntered(evt);
            }
        });

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Khu vực liber", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        btnLiber10.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber10.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber10.setText("Bàn 10");
        btnLiber10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber10.setName("11"); // NOI18N
        btnLiber10.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLiber10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiber10ActionPerformed(evt);
            }
        });

        btnLiber11.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber11.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber11.setText("Bàn 11");
        btnLiber11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber11.setName("12"); // NOI18N
        btnLiber11.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLiber11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiber11ActionPerformed(evt);
            }
        });

        btnLiber1.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber1.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber1.setText("Bàn 1");
        btnLiber1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber1.setName("2"); // NOI18N
        btnLiber1.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLiber1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiber1ActionPerformed(evt);
            }
        });

        btnLiber6.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber6.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber6.setText("Bàn 6");
        btnLiber6.setBorderPainted(false);
        btnLiber6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber6.setInheritsPopupMenu(true);
        btnLiber6.setName("7"); // NOI18N
        btnLiber6.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLiber6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiber6ActionPerformed(evt);
            }
        });

        btnLiber9.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber9.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber9.setText("Bàn 9");
        btnLiber9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber9.setName("10"); // NOI18N
        btnLiber9.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber12.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber12.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber12.setText("Bàn 12");
        btnLiber12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber12.setMaximumSize(new java.awt.Dimension(100, 100));
        btnLiber12.setMinimumSize(new java.awt.Dimension(100, 100));
        btnLiber12.setName("13"); // NOI18N
        btnLiber12.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLiber12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiber12ActionPerformed(evt);
            }
        });

        btnLiber3.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber3.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber3.setText("Bàn 3");
        btnLiber3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber3.setName("4"); // NOI18N
        btnLiber3.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber5.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber5.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber5.setText("Bàn 5");
        btnLiber5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber5.setName("6"); // NOI18N
        btnLiber5.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber4.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber4.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber4.setText("Bàn 4");
        btnLiber4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber4.setName("5"); // NOI18N
        btnLiber4.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber8.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber8.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber8.setText("Bàn 8");
        btnLiber8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber8.setName("9"); // NOI18N
        btnLiber8.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber2.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber2.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber2.setText("Bàn 2");
        btnLiber2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber2.setName("3"); // NOI18N
        btnLiber2.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnLiber7.setBackground(new java.awt.Color(204, 204, 204));
        btnLiber7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLiber7.setForeground(new java.awt.Color(255, 102, 0));
        btnLiber7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLiber7.setText("Bàn 7");
        btnLiber7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLiber7.setMaximumSize(new java.awt.Dimension(100, 100));
        btnLiber7.setMinimumSize(new java.awt.Dimension(100, 100));
        btnLiber7.setName("8"); // NOI18N
        btnLiber7.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLiber7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLiber5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLiber6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnLiber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnLiber3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLiber11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLiber7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLiber4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLiber8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLiber12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLiber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLiber2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLiber3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLiber4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLiber8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLiber11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(btnLiber5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLiber10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLiber9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Khu vực bàn VIP", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        btnVip2.setBackground(new java.awt.Color(204, 255, 204));
        btnVip2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVip2.setForeground(new java.awt.Color(255, 0, 0));
        btnVip2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnVip2.setText("Bàn VIP 2");
        btnVip2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVip2.setMaximumSize(new java.awt.Dimension(100, 100));
        btnVip2.setMinimumSize(new java.awt.Dimension(100, 100));
        btnVip2.setName("20"); // NOI18N
        btnVip2.setPreferredSize(new java.awt.Dimension(100, 100));
        btnVip2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVip2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVip2ActionPerformed(evt);
            }
        });

        btnVip3.setBackground(new java.awt.Color(204, 255, 204));
        btnVip3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVip3.setForeground(new java.awt.Color(255, 0, 0));
        btnVip3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnVip3.setText("Bàn VIP 3");
        btnVip3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVip3.setMaximumSize(new java.awt.Dimension(100, 100));
        btnVip3.setMinimumSize(new java.awt.Dimension(100, 100));
        btnVip3.setName("21"); // NOI18N
        btnVip3.setPreferredSize(new java.awt.Dimension(100, 100));
        btnVip3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVip3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVip3ActionPerformed(evt);
            }
        });

        btnVip1.setBackground(new java.awt.Color(204, 255, 204));
        btnVip1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVip1.setForeground(new java.awt.Color(255, 0, 0));
        btnVip1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnVip1.setText("Bàn VIP 1");
        btnVip1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVip1.setMaximumSize(new java.awt.Dimension(100, 100));
        btnVip1.setMinimumSize(new java.awt.Dimension(100, 100));
        btnVip1.setName("19"); // NOI18N
        btnVip1.setPreferredSize(new java.awt.Dimension(100, 100));
        btnVip1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVip1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVip1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnVip3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(btnVip1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(btnVip2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVip1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVip2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(btnVip3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Khu vực bàn lỗ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        btnLo1.setBackground(new java.awt.Color(204, 204, 204));
        btnLo1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLo1.setForeground(new java.awt.Color(51, 51, 255));
        btnLo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLo1.setText("Bàn lỗ 1");
        btnLo1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLo1.setName("14"); // NOI18N
        btnLo1.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLo1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLo1ActionPerformed(evt);
            }
        });

        btnLo2.setBackground(new java.awt.Color(204, 204, 204));
        btnLo2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLo2.setForeground(new java.awt.Color(51, 51, 255));
        btnLo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLo2.setText("Bàn lỗ 2");
        btnLo2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLo2.setName("15"); // NOI18N
        btnLo2.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLo2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLo2ActionPerformed(evt);
            }
        });

        btnLo3.setBackground(new java.awt.Color(204, 204, 204));
        btnLo3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLo3.setForeground(new java.awt.Color(51, 51, 255));
        btnLo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLo3.setText("Bàn lỗ 3");
        btnLo3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLo3.setMaximumSize(new java.awt.Dimension(100, 100));
        btnLo3.setMinimumSize(new java.awt.Dimension(100, 100));
        btnLo3.setName("16"); // NOI18N
        btnLo3.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLo3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLo3ActionPerformed(evt);
            }
        });

        btnLo4.setBackground(new java.awt.Color(204, 204, 204));
        btnLo4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLo4.setForeground(new java.awt.Color(51, 51, 255));
        btnLo4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLo4.setText("Bàn lỗ 4");
        btnLo4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLo4.setMaximumSize(new java.awt.Dimension(100, 100));
        btnLo4.setMinimumSize(new java.awt.Dimension(100, 100));
        btnLo4.setName("17"); // NOI18N
        btnLo4.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLo4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLo4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLo4ActionPerformed(evt);
            }
        });

        btnLo5.setBackground(new java.awt.Color(204, 204, 204));
        btnLo5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLo5.setForeground(new java.awt.Color(51, 51, 255));
        btnLo5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump-small.png"))); // NOI18N
        btnLo5.setText("Bàn lỗ 5");
        btnLo5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLo5.setMaximumSize(new java.awt.Dimension(100, 100));
        btnLo5.setMinimumSize(new java.awt.Dimension(100, 100));
        btnLo5.setName("18"); // NOI18N
        btnLo5.setPreferredSize(new java.awt.Dimension(100, 100));
        btnLo5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLo5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLo5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnLo1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(btnLo2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(btnLo3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLo4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btnLo5, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLo5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLo4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLo3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Phòng bàn", jPanel9);

        txtPhiDichVu.setText("0");
        txtPhiDichVu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhiDichVuFocusLost(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel19.setText("Đồ ăn & đồ uống :");

        snpCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                snpCountStateChanged(evt);
            }
        });
        snpCount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                snpCountMouseClicked(evt);
            }
        });

        btnStopContinue.setBackground(new java.awt.Color(255, 0, 0));
        btnStopContinue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnStopContinue.setForeground(new java.awt.Color(255, 255, 255));
        btnStopContinue.setText("Dừng giờ");
        btnStopContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopContinueActionPerformed(evt);
            }
        });

        btnThanhToan.setBackground(new java.awt.Color(255, 51, 51));
        btnThanhToan.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnThanhToan.setForeground(new java.awt.Color(255, 255, 255));
        btnThanhToan.setText("Thanh toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        btnXacNhan.setBackground(new java.awt.Color(0, 102, 102));
        btnXacNhan.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnXacNhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacNhan.setText("Thêm");
        btnXacNhan.setPreferredSize(new java.awt.Dimension(100, 100));
        btnXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXacNhanActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel20.setText("Ghi chú :");

        btnTamTinh.setBackground(new java.awt.Color(255, 255, 51));
        btnTamTinh.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnTamTinh.setForeground(new java.awt.Color(0, 0, 0));
        btnTamTinh.setText("Tạm tính");
        btnTamTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTamTinhActionPerformed(evt);
            }
        });

        lbTienGio.setText("0");

        jLabel22.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel22.setText("Mã hóa đơn :");

        txtTimeStart.setEditable(false);
        txtTimeStart.setBackground(new java.awt.Color(255, 255, 255));
        txtTimeStart.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        txtTimeStart.setForeground(new java.awt.Color(0, 0, 0));
        txtTimeStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimeStartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimeStartFocusLost(evt);
            }
        });
        txtTimeStart.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtTimeStartInputMethodTextChanged(evt);
            }
        });
        txtTimeStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeStartActionPerformed(evt);
            }
        });

        lbMaHoaDon.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbMaHoaDon.setText("HD0826482012");

        jLabel23.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel23.setText("Menu :");

        txtTimeStop.setEditable(false);
        txtTimeStop.setBackground(new java.awt.Color(255, 255, 255));
        txtTimeStop.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        txtTimeStop.setForeground(new java.awt.Color(0, 0, 0));

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setText("Bàn :");

        btnStart.setBackground(new java.awt.Color(0, 204, 0));
        btnStart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnStart.setForeground(new java.awt.Color(255, 255, 255));
        btnStart.setText("Bắt đầu");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        jScrollPane4.setViewportView(txtGhiChu);

        jLabel25.setText("Thời gian bắt đầu :");

        jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(243, 112, 33), 1, true));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/trump.png"))); // NOI18N

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        lbTable.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        lbDateNow.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbDateNow.setText("00 / 00 / 2000 00:00:00");

        jLabel27.setText("Thời gian kết thúc :");

        jLabel28.setFont(new java.awt.Font("Segoe UI Black", 1, 20)); // NOI18N
        jLabel28.setText("Tổng tiền :");

        jLabel29.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel29.setText("Phí dịch vụ :");

        lbTongTien.setFont(new java.awt.Font("Segoe UI Black", 1, 20)); // NOI18N
        lbTongTien.setForeground(new java.awt.Color(255, 51, 51));
        lbTongTien.setText("0");

        cboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCategoryItemStateChanged(evt);
            }
        });
        cboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCategoryActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel30.setText("Giảm giá :");

        tbInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên SP", "Số lượng", "Đơn giá", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tbInfo);

        jLabel31.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel31.setText("Ngày tạo hóa đơn :");

        txtPhiKhac.setText("0");
        txtPhiKhac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhiKhacFocusLost(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel32.setText("Tiền giờ :");

        txtGiamGia.setText("0");
        txtGiamGia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGiamGiaFocusLost(evt);
            }
        });
        txtGiamGia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGiamGiaActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel33.setText("Loại :");

        cboFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboFood.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboFoodItemStateChanged(evt);
            }
        });
        cboFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboFoodMouseClicked(evt);
            }
        });
        cboFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFoodActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel34.setText("Phí khác :");

        jLabel35.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel35.setText("Tổng thời gian đã chơi :");

        lbTime.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbTime.setText("00:00:00");

        btnXoasp.setBackground(new java.awt.Color(255, 51, 51));
        btnXoasp.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnXoasp.setForeground(new java.awt.Color(255, 255, 255));
        btnXoasp.setText("Xoá");
        btnXoasp.setPreferredSize(new java.awt.Dimension(100, 100));
        btnXoasp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaspActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator7)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(btnTamTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(btnStart)
                                .addGap(18, 18, 18)
                                .addComponent(btnStopContinue))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTimeStop, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel13Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel23)
                                    .addGap(63, 63, 63))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel33)
                                        .addComponent(jLabel19))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboFood, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel13Layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(snpCount)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnXacNhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel13Layout.createSequentialGroup()
                                    .addGap(109, 109, 109)
                                    .addComponent(btnXoasp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(17, 17, 17))
                        .addComponent(jSeparator3)
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGap(232, 232, 232)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel13Layout.createSequentialGroup()
                                        .addGap(378, 378, 378)
                                        .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel13Layout.createSequentialGroup()
                                        .addGap(157, 157, 157)
                                        .addComponent(txtPhiDichVu)
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel34)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPhiKhac, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addGap(61, 61, 61)
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel20)
                                .addComponent(jLabel32)
                                .addComponent(jLabel29))
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel13Layout.createSequentialGroup()
                                    .addGap(31, 31, 31)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel13Layout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(lbTienGio, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel30))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel35)
                            .addComponent(jLabel31))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDateNow)
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lbTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbMaHoaDon, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimeStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStart)
                            .addComponent(btnStopContinue))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(snpCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel23))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel33))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19)))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnXacNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnXoasp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(lbTienGio)
                            .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(txtPhiDichVu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhiKhac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(lbTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTamTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(319, 319, 319))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDateNow)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(lbMaHoaDon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(lbTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35)
                    .addComponent(lbTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(263, 263, 263))
        );

        tabs.addTab("Thực đơn", jPanel13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblFullname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPhoto, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnToggleTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnActivityHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnChangePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnChat, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(114, 114, 114))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(pnlManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(651, 651, 651))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnToggleTheme, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActivityHistory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangePassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHistory)))
                        .addGap(36, 36, 36)
                        .addComponent(btnLogout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addGap(35, 35, 35)
                        .addComponent(pnlManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator1)))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLeftCenterLayout = new javax.swing.GroupLayout(pnlLeftCenter);
        pnlLeftCenter.setLayout(pnlLeftCenterLayout);
        pnlLeftCenterLayout.setHorizontalGroup(
            pnlLeftCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftCenterLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        pnlLeftCenterLayout.setVerticalGroup(
            pnlLeftCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftCenterLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pnlLeft.add(pnlLeftCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlLeft, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.exit();
    }//GEN-LAST:event_formWindowClosed

    private void btnToggleThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleThemeActionPerformed
        // TODO add your handling code here:
        XUI.toggleTheme(this);
        updateThemeButtonText();
        // Update panel colors after theme change
        XUI.setPanelPadding(pnlLeft, 0, 0, 0, 0);
        XUI.setPanelPadding(pnlLeftCenter, 0, 0, 0, 0);
        XUI.setPanelPadding(jPanel1, 0, 0, 0, 0);
        SwingUtilities.updateComponentTreeUI(this);
    }//GEN-LAST:event_btnToggleThemeActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        // Kiểm tra bàn chưa thanh toán trước khi thoát
        if (checkUnpaidTables()) {
            // Có bàn chưa thanh toán, không làm gì cả (giữ cửa sổ mở)
            return;
        }
        // Không có bàn chưa thanh toán, thoát bình thường
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnActivityHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivityHistoryActionPerformed
        // TODO add your handling code here:
        this.showActivityHistoryJDialog(new javax.swing.JDialog(this, true));
    }//GEN-LAST:event_btnActivityHistoryActionPerformed

    private void btnChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChatActionPerformed
        // TODO add your handling code here:
        ChatWindowJDialog chatDialog = new ChatWindowJDialog(this, false, currentUser);
        chatDialog.setVisible(true);
    }//GEN-LAST:event_btnChatActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        if (XDialog.confirm(this, "Bạn có muốn đăng xuất?")) {
            this.dispose();
            new PolyBilliardsJFrame().setVisible(true);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePasswordActionPerformed
        // TODO add your handling code here:
        this.showChangePasswordJDialog(this);
    }//GEN-LAST:event_btnChangePasswordActionPerformed

    private void btnDrinkMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkMgrActionPerformed
        // TODO add your handling code here:
        this.showDrinkManagerJDialog(this);
    }//GEN-LAST:event_btnDrinkMgrActionPerformed

    private void btnUserMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserMgrActionPerformed
        // TODO add your handling code here:
        this.showUserManagerJDialog(this);
    }//GEN-LAST:event_btnUserMgrActionPerformed

    private void btnCardMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCardMgrActionPerformed
        // TODO add your handling code here:
//        this.showCardManagerJDialog(this);
    }//GEN-LAST:event_btnCardMgrActionPerformed

    private void btnCategoryMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCategoryMgrActionPerformed
        // TODO add your handling code here:
        this.showCategoryManagerJDialog(this);
    }//GEN-LAST:event_btnCategoryMgrActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        // TODO add your handling code here:
        this.showHistoryJDialog(this);
    }//GEN-LAST:event_btnHistoryActionPerformed

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel17MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel17MouseEntered

    private void btnLiber10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiber10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiber10ActionPerformed

    private void btnLiber11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiber11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiber11ActionPerformed

    private void btnLiber1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiber1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiber1ActionPerformed

    private void btnLiber6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiber6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiber6ActionPerformed

    private void btnLiber12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiber12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiber12ActionPerformed

    private void btnVip2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVip2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVip2ActionPerformed

    private void btnVip3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVip3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVip3ActionPerformed

    private void btnVip1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVip1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVip1ActionPerformed

    private void btnLo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLo1ActionPerformed

    private void btnLo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLo2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLo2ActionPerformed

    private void btnLo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLo3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLo3ActionPerformed

    private void btnLo4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLo4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLo4ActionPerformed

    private void btnLo5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLo5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLo5ActionPerformed

    private void txtPhiDichVuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhiDichVuFocusLost
        // TODO add your handling code here:
        calTotalPice();
    }//GEN-LAST:event_txtPhiDichVuFocusLost

    private void snpCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_snpCountStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_snpCountStateChanged

    private void snpCountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_snpCountMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_snpCountMouseClicked

    private void btnStopContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopContinueActionPerformed
        // TODO add your handling code here:
        if (idtable <= 1) {
            XDialog.alert(this, "Chưa chọn bàn chơi !");
            return;
        }
        if (txtTimeStart.getText().equals("")) {
            XDialog.alert(this, "Chưa có thời gian bắt đầu");
            return;
        }
        
        // Kiểm tra trạng thái hiện tại để quyết định hành động
        if (!isPaused) {
            // Đang chạy → Dừng
            pauseGame();
            calTotalPice();
        } else {
            // Đã dừng → Tiếp tục
            resumeGame();
        }
    }//GEN-LAST:event_btnStopContinueActionPerformed

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        // TODO add your handling code here:
        if (txtTimeStart.getText().equals("")) {
            XDialog.alert(this, "Chưa bắt đầu");
            return;
        }
        if (txtTimeStop.getText().equals("")) {
            XDialog.alert(this, "Chưa dừng giờ");
        } else {
            if (XDialog.confirm(this, "Bạn muốn thanh toán bàn này?")) {
            this.updateBill();
            clickThanhToan();
            XDialog.info(this, "ĐÃ THANH TOÁN");
            btnStart.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void btnXacNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXacNhanActionPerformed
        // TODO add your handling code here:
        if (txtTimeStart.getText().equals("")) {
            XDialog.alert(this, "Chưa bắt đầu giờ");
            return;
        }
        this.insertBillinfo();
        this.calTotalPice();
    }//GEN-LAST:event_btnXacNhanActionPerformed

    private void btnTamTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTamTinhActionPerformed
        // TODO add your handling code here:
        this.billTamTinh();
    }//GEN-LAST:event_btnTamTinhActionPerformed

    private void txtTimeStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimeStartFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeStartFocusGained

    private void txtTimeStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimeStartFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeStartFocusLost

    private void txtTimeStartInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtTimeStartInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeStartInputMethodTextChanged

    private void txtTimeStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeStartActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        if (idtable <= 1) {
            XDialog.alert(this, "Chưa chọn bàn chơi !");
            return;
        }
        this.insertBill();
        btnStart.setEnabled(false);
        btnStopContinue.setEnabled(true);
        
        // Bắt đầu theo dõi thời gian chơi
        startPlayTime();
    }//GEN-LAST:event_btnStartActionPerformed

    private void cboCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCategoryItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            this.dataCboFood();
        }
    }//GEN-LAST:event_cboCategoryItemStateChanged

    private void cboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboCategoryActionPerformed

    private void txtPhiKhacFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhiKhacFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhiKhacFocusLost

    private void txtGiamGiaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGiamGiaFocusLost
        // TODO add your handling code here:
        calTotalPice();
    }//GEN-LAST:event_txtGiamGiaFocusLost

    private void cboFoodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboFoodItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            this.showIdFood();
        }
    }//GEN-LAST:event_cboFoodItemStateChanged

    private void cboFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboFoodMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cboFoodMouseClicked

    private void cboFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFoodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboFoodActionPerformed

    private void txtGiamGiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGiamGiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGiamGiaActionPerformed

    private void btnXoaspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaspActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbInfo.getSelectedRow();
        if (selectedRow >= 0) {
            // Lấy thông tin sản phẩm được chọn
            String productName = (String) tbInfo.getValueAt(selectedRow, 0);
            int currentQuantity = (Integer) tbInfo.getValueAt(selectedRow, 1);
            float unitPrice = (Float) tbInfo.getValueAt(selectedRow, 2);
            
            if (currentQuantity > 1) {
                // Nếu số lượng > 1, hiện dialog nhập số lượng cần xóa
                String input = XDialog.prompt(this, 
                    "Nhập số lượng cần xóa.\nSố lượng hiện có: " + currentQuantity);
                
                if (input != null && !input.trim().isEmpty()) {
                    try {
                        int quantityToRemove = Integer.parseInt(input.trim());
                        
                        // Kiểm tra số lượng nhập vào
                        if (quantityToRemove <= 0) {
                            XDialog.alert(this, "Số lượng phải lớn hơn 0!");
                            return;
                        }
                        
                        if (quantityToRemove > currentQuantity) {
                            XDialog.alert(this, "Số lượng xóa không được lớn hơn số lượng hiện có!");
                            return;
                        }
                        
                        // Xử lý xóa số lượng
                        if (quantityToRemove == currentQuantity) {
                            // Xóa toàn bộ sản phẩm
                            modelTable = (DefaultTableModel) tbInfo.getModel();
                            modelTable.removeRow(selectedRow);
                            
                            // Xóa trong database
                            try {
                                String foodId = showIdFood(); // Lấy ID của sản phẩm được chọn
                                if (foodId != null) {
                                    billifdao.deleteByBillIdAndFoodId(showIdBill(), foodId);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            
                            XDialog.info(this, "Đã xóa toàn bộ " + productName + " khỏi hóa đơn!");
                        } else {
                            // Giảm số lượng
                            int newQuantity = currentQuantity - quantityToRemove;
                            float newTotalPrice = newQuantity * unitPrice;
                            
                            // Cập nhật trên bảng
                            tbInfo.setValueAt(newQuantity, selectedRow, 1);
                            tbInfo.setValueAt(newTotalPrice, selectedRow, 3);
                            
                            // Cập nhật trong database
                            try {
                                String foodId = showIdFood(); // Lấy ID của sản phẩm được chọn
                                if (foodId != null) {
                                    billifdao.updateCountByBillIdAndFoodId(showIdBill(), foodId, newQuantity);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            
                            XDialog.info(this, "Đã xóa " + quantityToRemove + " " + productName + " khỏi hóa đơn!");
                        }
                        
                        // Tính lại tổng tiền
                        calTotalPice();
                        
                    } catch (NumberFormatException e) {
                        XDialog.alert(this, "Vui lòng nhập số hợp lệ!");
                    }
                }
            } else {
                // Nếu số lượng = 1, xóa toàn bộ sản phẩm
                if (XDialog.confirm(this, "Bạn có muốn xóa sản phẩm này khỏi hóa đơn?")) {
                    modelTable = (DefaultTableModel) tbInfo.getModel();
                    modelTable.removeRow(selectedRow);
                    
                    // Xóa trong database
                    try {
                        String foodId = showIdFood(); // Lấy ID của sản phẩm được chọn
                        if (foodId != null) {
                            billifdao.deleteByBillIdAndFoodId(showIdBill(), foodId);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                    // Tính lại tổng tiền
                    calTotalPice();
                    
                    XDialog.info(this, "Đã xóa sản phẩm khỏi hóa đơn!");
                }
            }
        } else {
            XDialog.alert(this, "Vui lòng chọn sản phẩm cần xóa!");
        }
    }//GEN-LAST:event_btnXoaspActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolyBilliardsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolyBilliardsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolyBilliardsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolyBilliardsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginJDialog loginDialog = new LoginJDialog(new javax.swing.JDialog(), true);
                loginDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                loginDialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivityHistory;
    private javax.swing.JButton btnCardMgr;
    private javax.swing.JButton btnCategoryMgr;
    private javax.swing.JButton btnChangePassword;
    private javax.swing.JButton btnChat;
    private javax.swing.JButton btnDrinkMgr;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnLiber1;
    private javax.swing.JButton btnLiber10;
    private javax.swing.JButton btnLiber11;
    private javax.swing.JButton btnLiber12;
    private javax.swing.JButton btnLiber2;
    private javax.swing.JButton btnLiber3;
    private javax.swing.JButton btnLiber4;
    private javax.swing.JButton btnLiber5;
    private javax.swing.JButton btnLiber6;
    private javax.swing.JButton btnLiber7;
    private javax.swing.JButton btnLiber8;
    private javax.swing.JButton btnLiber9;
    private javax.swing.JButton btnLo1;
    private javax.swing.JButton btnLo2;
    private javax.swing.JButton btnLo3;
    private javax.swing.JButton btnLo4;
    private javax.swing.JButton btnLo5;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStopContinue;
    private javax.swing.JButton btnTamTinh;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnToggleTheme;
    private javax.swing.JButton btnUserMgr;
    private javax.swing.JButton btnVip1;
    private javax.swing.JButton btnVip2;
    private javax.swing.JButton btnVip3;
    private javax.swing.JButton btnXacNhan;
    private javax.swing.JButton btnXoasp;
    private javax.swing.JComboBox<String> cboCategory;
    private javax.swing.JComboBox<String> cboFood;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel lbDateNow;
    private javax.swing.JLabel lbMaHoaDon;
    private javax.swing.JLabel lbTable;
    private javax.swing.JLabel lbTienGio;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbTongTien;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlLeftCenter;
    private javax.swing.JPanel pnlManager;
    private javax.swing.JSpinner snpCount;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tbInfo;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtGiamGia;
    private javax.swing.JTextField txtPhiDichVu;
    private javax.swing.JTextField txtPhiKhac;
    private javax.swing.JTextField txtTimeStart;
    private javax.swing.JTextField txtTimeStop;
    // End of variables declaration//GEN-END:variables

    @Override
    public void init() {
        // Apply FlatLaf by default
        XUI.setupUI(this);

        // Disable window resizing and maximize button
        this.setResizable(false);

        this.setIconImage(XIcon.getIcon("trump-small.png").getImage());
        this.setLocationRelativeTo(null);

        // Always show welcome dialog
        WelcomeJDialog welcomeDialog = new WelcomeJDialog(this, true);
        welcomeDialog.setVisible(true);

        // Only show login dialog if no user is logged in
        if (currentUser == null) {
            LoginJDialog loginDialog = new LoginJDialog(new javax.swing.JDialog(), true);
            loginDialog.setVisible(true);
        } else {
            // Set user info for logged in user
            XIcon.setIcon(lblPhoto, "photos/" + currentUser.getPhoto());
            lblFullname.setText(currentUser.getFullname());

            if (!currentUser.isManager()) {
                jPanel1.remove(pnlManager);
            }
        }

        // Set panel colors based on theme
        XUI.setPanelPadding(pnlLeft, 0, 0, 0, 0);
        XUI.setPanelPadding(pnlLeftCenter, 0, 0, 0, 0);
        XUI.setPanelPadding(jPanel1, 0, 0, 0, 0);
//        XUI.setPanelPadding(pnlManager, 0, 0, 0, 0);

        // Customize theme toggle button
        updateThemeButtonText();

        // Set hand cursor for all buttons
        XUI.setHandCursor(this);


        hourlyRateCalculator = new XHourlyRateCalculator();
        snpCount.setValue(1);
        setlbDateNow();
        dataCboCategory();
        eventAction();
        
        // Khởi tạo timer cho thời gian chơi
        initPlayTimeTimer();
    }

    private void updateThemeButtonText() {
        if (XUI.isDarkMode()) {
            btnToggleTheme.setText("Chế độ: Tối");
            btnToggleTheme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/crescent-moon.png")));
        } else {
            btnToggleTheme.setText("Chế độ: Sáng");
            btnToggleTheme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/billiards/icons/menu/sun.png")));
        }
    }

    private void updateTime() {
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("HH:mm:ss - dd/MM/yyyy");
        lblTime.setText("Giờ là: " + sdf.format(new java.util.Date()));
    }

    // Thêm phương thức để cập nhật thời gian chơi
    private void updatePlayTime() {
        if (!isPlaying || isPaused) {
            return; // Không cập nhật khi dừng
        }
        
        if (startTime > 0) {
            long currentTime = System.currentTimeMillis();
            long elapsedTime = currentTime - startTime - totalPausedTime;
            
            // Chuyển đổi milliseconds thành giờ:phút:giây
            long hours = elapsedTime / (1000 * 60 * 60);
            long minutes = (elapsedTime % (1000 * 60 * 60)) / (1000 * 60);
            long seconds = (elapsedTime % (1000 * 60)) / 1000;
            
            String timeString = String.format("%02d:%02d:%02d", hours, minutes, seconds);
            lbTime.setText(timeString);
        }
    }
    
    // Khởi tạo timer cho thời gian chơi
    private void initPlayTimeTimer() {
        playTimeTimer = new javax.swing.Timer(1000, e -> updatePlayTime());
    }
    
    // Bắt đầu theo dõi thời gian chơi
    private void startPlayTime() {
        if (!isPaused) {
            // Bắt đầu mới
            startTime = System.currentTimeMillis();
            totalPausedTime = 0;
        }
        // Nếu đang pause, không reset startTime
        
        isPlaying = true;
        if (playTimeTimer != null) {
            playTimeTimer.start();
        }
    }
    
    // Dừng theo dõi thời gian chơi
    private void stopPlayTime() {
        isPlaying = false;
        if (playTimeTimer != null) {
            playTimeTimer.stop();
        }
    }
    
    // Reset thời gian chơi
    private void resetPlayTime() {
        stopPlayTime();
        startTime = 0;
        isPaused = false;
        totalPausedTime = 0;
        pauseTime = 0;
        lbTime.setText("00:00:00");
        txtTimeStop.setText("");
        
        // Reset UI
        btnStopContinue.setText("Dừng giờ");
        btnStopContinue.setBackground(new Color(255,0,0));
    }
    
    private void pauseGame() {
        isPaused = true;
        pauseTime = System.currentTimeMillis();
        
        // Dừng timer
        if (playTimeTimer != null) {
            playTimeTimer.stop();
        }
        
        // Cập nhật UI
        btnStopContinue.setText("Tiếp tục");
        btnStopContinue.setBackground(new Color(0,102,102));
        
        // Hiển thị thời gian dừng
        txtTimeStop.setText(XDateHelper.toString(new Date(), "yyyy-MM-dd HH:mm:ss"));
    }
    
    private void resumeGame() {
        isPaused = false;
        
        // Tính tổng thời gian đã dừng
        long currentTime = System.currentTimeMillis();
        totalPausedTime += (currentTime - pauseTime);
        
        // Cập nhật startTime để bù thời gian đã dừng
        startTime += (currentTime - pauseTime);
        
        // Khởi động lại timer
        if (playTimeTimer != null) {
            playTimeTimer.start();
        }
        
        // Cập nhật UI
        btnStopContinue.setText("Dừng giờ");
        btnStopContinue.setBackground(new Color(255,0,0)); // Màu mặc định
        
        // Xóa thời gian dừng
        txtTimeStop.setText("");
    }

    /*--------Quản lý bàn---------*/
    private void selectTabs() {
        tabs.setSelectedIndex(1);
    }

    private void dataCboCategory() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboCategory.getModel();
        cboModel.removeAllElements();
        try {
            List<FoodCategory> list = fcatedao.findAll();
            for (FoodCategory f : list) {
                cboModel.addElement(f.getName());
            }
            dataCboFood();
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert(this, "Lỗi!");
        }
    }

    private void dataCboFood() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboFood.getModel();
        cboModel.removeAllElements();
        try {
            int id = cboCategory.getSelectedIndex();
            if (id >= 0) {
                // Lấy đối tượng FoodCategory theo chỉ số được chọn
                FoodCategory selectedCategory = fcatedao.findAll().get(id);
                // Truyền id (kiểu String) vào findByCategoryId
                List<Food> listfood = fdao.findByCategoryId(selectedCategory.getId());
                for (Food f : listfood) {
                    cboModel.addElement(f);
                }
            } else {
                System.out.println("No");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clickTable() {
        ActionListener buttonls = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearBill();
                clickbt = (JButton) e.getSource();
                idtable = Integer.parseInt(clickbt.getName());
                loadDataonTable();
                calTotalPice();
                selectTabs();
                lbTable.setText(clickbt.getText());
            }
        };
        btnLiber10.addActionListener(buttonls);
        btnLiber11.addActionListener(buttonls);
        btnLiber1.addActionListener(buttonls);
        btnLiber6.addActionListener(buttonls);
        btnLiber9.addActionListener(buttonls);
        btnLiber12.addActionListener(buttonls);
        btnLiber3.addActionListener(buttonls);
        btnLiber5.addActionListener(buttonls);
        btnLiber4.addActionListener(buttonls);
        btnLiber8.addActionListener(buttonls);
        btnLiber2.addActionListener(buttonls);
        btnLiber7.addActionListener(buttonls);
        btnVip2.addActionListener(buttonls);
        btnVip3.addActionListener(buttonls);
        btnVip1.addActionListener(buttonls);
        btnLo1.addActionListener(buttonls);
        btnLo2.addActionListener(buttonls);
        btnLo3.addActionListener(buttonls);
        btnLo4.addActionListener(buttonls);
        btnLo5.addActionListener(buttonls);
    }

    //set lbDateNow
    private void setlbDateNow() {
        Date datenow = XDateHelper.now();
        lbDateNow.setText(XDateHelper.toString(datenow, "yyyy-MM-dd"));
    }

    //updatelbTienGio
    private void updatelbTienGio() {
        lbTienGio.setText(String.valueOf(hourlyRateCalculator.getTotalAmount()));
    }

    //showIdFood
    private String showIdFood() {
        String idfood = null;
        try {
            Food food = (Food) cboFood.getSelectedItem();
            if (food != null) {
                idfood = food.getId();
            } else {
                System.out.println("Select food is null");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return idfood;
    }

    //ShowidBill
    private int showIdBill() {
        int idbill = 0;
        try {
            Integer idbillObject = billdao.findbyIdBill(idtable);
            if (idbillObject != null) {
                idbill = idbillObject.intValue();
                System.out.println(idbill);
                return idbill;
            } else {
                return 0;

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return idbill;
    }

    //Clear Bill
    private void clearBill() {
        txtTimeStart.setText("");
        txtTimeStop.setText("");
        txtPhiDichVu.setText("0");
        txtPhiKhac.setText("0");
        txtGiamGia.setText("0");
        txtGhiChu.setText("");
        lbTongTien.setText("0");
        lbTienGio.setText("0");
        lbMaHoaDon.setText("");
        snpCount.setValue(1);
        modelTable = (DefaultTableModel) tbInfo.getModel();
        modelTable.setRowCount(0);
        btnStart.setEnabled(true);
        btnStopContinue.setEnabled(false);
        
        // Reset thời gian chơi
        resetPlayTime();
    }

    //getBill
    private Bill getBill() {
        Bill model = new Bill();
        model.setDatecheckin(XDateHelper.toDate(txtTimeStart.getText(), "yyyy-MM-dd HH:mm:ss"));
        if (txtTimeStop.getText().equals("")) {
            model.setDatecheckout(XDateHelper.toDate(null));
        } else {
            model.setDatecheckout(XDateHelper.toDate(txtTimeStop.getText()));
        }
        model.setIdtable(idtable);
        return model;
    }

    //getBillInfo
    private Billinfo getBillIfno() {
        count = (int) snpCount.getValue();
        Billinfo model = new Billinfo();
        model.setIdbill(showIdBill());
        model.setIdfood(showIdFood()); // Giữ nguyên String
        model.setCount(count);
        return model;
    }

    //insert Billinfo
    private void insertBillinfo() {
        Billinfo billinfo = getBillIfno();
        try {
            // Kiểm tra xem đồ ăn đã có trong bảng chưa
            Food selectedFood = (Food) cboFood.getSelectedItem();
            if (selectedFood == null) {
                XDialog.alert(this, "Vui lòng chọn đồ ăn!");
                return;
            }
            
            String selectedFoodName = selectedFood.getName();
            boolean foodExists = false;
            int existingRowIndex = -1;
            
            // Tìm kiếm trong bảng hiện tại
            for (int i = 0; i < tbInfo.getRowCount(); i++) {
                Object tableValue = tbInfo.getValueAt(i, 0);
                String tableFoodName = null;
                
                // Xử lý cả trường hợp tableValue là Food hoặc String
                if (tableValue instanceof Food) {
                    tableFoodName = ((Food) tableValue).getName();
                } else if (tableValue instanceof String) {
                    tableFoodName = (String) tableValue;
                }
                
                if (selectedFoodName.equals(tableFoodName)) {
                    foodExists = true;
                    existingRowIndex = i;
                    break;
                }
            }
            
            if (foodExists) {
                // Nếu đồ ăn đã có, tăng số lượng
                int currentCount = (Integer) tbInfo.getValueAt(existingRowIndex, 1);
                int newCount = currentCount + billinfo.getCount();
                float unitPrice = (Float) tbInfo.getValueAt(existingRowIndex, 2);
                float newTotalPrice = newCount * unitPrice;
                
                // Cập nhật dòng trong bảng
                tbInfo.setValueAt(newCount, existingRowIndex, 1);
                tbInfo.setValueAt(newTotalPrice, existingRowIndex, 3);
                
                // Cập nhật trong database - thay vì insert mới, update record cũ
                try {
                    // Tìm record cũ trong database và update số lượng
                    List<Billinfo> existingBillInfos = billifdao.selectByBillId(showIdBill());
                    for (Billinfo existingInfo : existingBillInfos) {
                        if (existingInfo.getIdfood().equals(billinfo.getIdfood())) {
                            // Update số lượng trong database
                            existingInfo.setCount(newCount);
                            billifdao.update(existingInfo);
                            break;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                XDialog.info(this, "Đã tăng số lượng " + selectedFoodName + " lên " + newCount);
            } else {
                // Nếu đồ ăn chưa có, thêm mới
                billifdao.insert(billinfo);
                this.loadDataonTable();
                XDialog.info(this, "Đã thêm " + selectedFoodName + " vào hóa đơn");
            }
            
            snpCount.setValue(1);
            calTotalPice(); // Tính lại tổng tiền
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert(this, "Lỗi khi thêm đồ ăn!");
        }
    }

    //TienGio
    private void tinhTienGio() {
        hourlyRateCalculator.startTimer();
    }

    //Check input
    private void checkinput() {
        try {
            int giamgia = Integer.parseInt(txtGiamGia.getText());
            int phidichvu = Integer.parseInt(txtPhiDichVu.getText());
            int phikhac = Integer.parseInt(txtPhiKhac.getText());
            if (giamgia < 0 || phidichvu < 0 || phikhac < 0) {
                XDialog.alert(this, "Vui lòng nhập số dương");
            }
        } catch (Exception e) {
            XDialog.alert(this, "Vui lòng nhập số hợp lệ!");
        }
    }

    //Tính tổng tiền
    private void calTotalPice() {
        this.checkinput();
        float tong = 0;
        this.updatelbTienGio();
        for (int i = 0; i < tbInfo.getRowCount(); i++) {
            float thanhtien = (float) tbInfo.getValueAt(i, 3);
            tong += thanhtien;
        }
        tong += Float.parseFloat(lbTienGio.getText());  //tiengio
        tong -= Float.parseFloat(txtGiamGia.getText()); //giamgia
        tong += Float.parseFloat(txtPhiDichVu.getText()); //Phidichvu
        tong += Float.parseFloat(txtPhiKhac.getText());  //PhiKhac
        lbTongTien.setText(String.valueOf(tong));

    }

    //insert Bill
    private void insertBill() {
        hourlyRateCalculator.reset(); // Đặt lại tiền giờ khi bắt đầu bàn mới
        tinhTienGio();
        txtTimeStart.setText(XDateHelper.stringsnow());
        Bill model = getBill();
        try {
            billdao.insert(model);
            XDialog.info(this, "Thành công");
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert(this, "Lỗi!");
        }
    }

    private void updateBill() {
        Bill model = getBill();
        try {
            model.setDatecheckout(XDateHelper.toDate(txtTimeStop.getText()));
            model.setStatus(1);
            model.setTotalPrice(Float.parseFloat(lbTongTien.getText()));
            model.setId(showIdBill());
            billdao.update(model);
            this.billTamTinh();
            this.clearBill();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //load data on Table
    private void loadDataonTable() {
        modelTable = (DefaultTableModel) tbInfo.getModel();
        modelTable.setRowCount(0);
        try {
            this.showDateCheckin();
            List<Menu> m = menudao.selectAllMenuByIdTable(idtable);
            for (Menu menu : m) {
                if (m != null) {
                    Object[] row = {
                        menu.getFoodname(),
                        menu.getCount(),
                        menu.getPrice(),
                        menu.getTotalPrice()
                    };
                    modelTable.addRow(row);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //event Action
    private void eventAction() {
        SwingUtilities.invokeLater(() -> {
            clickTable();
        });
    }

    //Select showCHeckin
    private void showDateCheckin() {
        try {
            Timestamp bill = billdao.findDatebyIdtable(idtable);
            if (bill != null) {
                txtTimeStart.setText(String.valueOf(bill));
                btnStart.setEnabled(false);
                btnStopContinue.setEnabled(true);
                
                // Khôi phục thời gian chơi nếu bàn đang được sử dụng
                if (bill != null) {
                    // Tính toán thời gian đã chơi từ thời điểm bắt đầu
                    long startTimeMillis = bill.getTime();
                    long currentTime = System.currentTimeMillis();
                    long elapsedTime = currentTime - startTimeMillis;
                    
                    // Cập nhật thời gian đã chơi
                    long hours = elapsedTime / (1000 * 60 * 60);
                    long minutes = (elapsedTime % (1000 * 60 * 60)) / (1000 * 60);
                    long seconds = (elapsedTime % (1000 * 60)) / 1000;
                    
                    String timeString = String.format("%02d:%02d:%02d", hours, minutes, seconds);
                    lbTime.setText(timeString);
                    
                    // Bắt đầu timer để tiếp tục cập nhật thời gian
                    startTime = startTimeMillis;
                    isPlaying = true;
                    if (playTimeTimer != null) {
                        playTimeTimer.start();
                    }
                }
            } else {
                txtTimeStart.setText("");
                btnStart.setEnabled(true);
                btnStopContinue.setEnabled(false);
                
                // Reset thời gian chơi nếu bàn trống
                resetPlayTime();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Click ThanhToan
    private void clickThanhToan() {
        modelTable = (DefaultTableModel) tbInfo.getModel();
        modelTable.setRowCount(0);
        try {
            billifdao.deleteBillInfo();
            this.loadDataonTable();
            
            // Reset thời gian chơi sau khi thanh toán
            resetPlayTime();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //**************billTamTinh
    private void billTamTinh() {
        try {
            List<Menu> m = menudao.selectAllMenuByIdTable(idtable);
            XDialog.info(this, 
                    "Mã hóa đơn :" + lbMaHoaDon.getText()
                    + "\nNgày tạo :" + txtTimeStop.getText()
                    + "\nBàn khách chơi :" + lbTable.getText()
                    + "\nGiờ vào :" + txtTimeStart.getText()
                    + "\nGiờ ra : " + txtTimeStop.getText()
                    + "\nTiền giờ :" + lbTienGio.getText()
                    + "\nGiảm giá :" + txtGiamGia.getText()
                    + "\nPhí dịch vụ : " + txtPhiDichVu.getText()
                    + "\nPhí khác :" + txtPhiKhac.getText()
                    + "\n-----------------------------------------------------------\n"
                    + "Mặt hàng --- Số lượng --- Giá --- Thành tiền\n"
                    + m.toString()
                    + "\n-----------------------------------------------------------\n"
                    + "TỔNG :" + lbTongTien.getText()
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Kiểm tra xem có bàn nào chưa thanh toán không
     * @return true nếu có bàn chưa thanh toán, false nếu tất cả đã thanh toán
     */
    private boolean checkUnpaidTables() {
        try {
            // Lấy danh sách tất cả các bàn có bill chưa thanh toán (status = 0)
            String sql = "SELECT DISTINCT idTable FROM Bill WHERE status = 0";
            List<Integer> unpaidTables = new ArrayList<>();
            
            try (java.sql.ResultSet rs = poly.billiards.util.XJdbc.exeQuery(sql)) {
                while (rs.next()) {
                    unpaidTables.add(rs.getInt("idTable"));
                }
            }
            
            if (!unpaidTables.isEmpty()) {
                // Tạo danh sách tên bàn chưa thanh toán
                StringBuilder tableNames = new StringBuilder();
                for (int i = 0; i < unpaidTables.size(); i++) {
                    if (i > 0) {
                        tableNames.append(", ");
                    }
                    tableNames.append("Bàn ").append(unpaidTables.get(i));
                }
                
                XDialog.alert(this, "Các bàn sau chưa thanh toán xong:\n" + tableNames.toString());
                return true;
            }
            
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public void showBillDetail(Bill bill) {
        // Chuyển sang tab chi tiết (index 1)
        tabs.setSelectedIndex(1);
        // Hiển thị thông tin bill lên các trường cơ bản
        lbMaHoaDon.setText(String.valueOf(bill.getId()));
        lbTable.setText("Bàn " + bill.getIdtable());
        txtTimeStart.setText(bill.getDatecheckin() != null ? XDateHelper.toString(bill.getDatecheckin(), "yyyy-MM-dd HH:mm:ss") : "");
        txtTimeStop.setText(bill.getDatecheckout() != null ? XDateHelper.toString(bill.getDatecheckout(), "yyyy-MM-dd HH:mm:ss") : "");
        lbTongTien.setText(bill.getTotalPrice() > 0 ? String.valueOf(bill.getTotalPrice()) : "");
        // Hiển thị chi tiết bill info (danh sách món)
        DefaultTableModel model = (DefaultTableModel) tbInfo.getModel();
        model.setRowCount(0);
        List<Billinfo> billInfos = billifdao.selectByBillId(bill.getId());
        for (Billinfo info : billInfos) {
            // Lấy tên món từ FoodDAO
            Food food = fdao.findById(info.getIdfood());
            Object[] row = {
                food != null ? food.getName() : "",
                info.getCount(),
                food != null ? food.getUnitPrice() : "",
                (food != null ? food.getUnitPrice() : 0) * info.getCount()
            };
            model.addRow(row);
        }
    }
}
