/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.billiards.ui.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import poly.billiards.dao.TableTypeDAO;
import poly.billiards.dao.impl.TableTypeDAOImpl;
import poly.billiards.entity.TableType;
import poly.billiards.util.XDialog;
import poly.billiards.util.XUI;

/**
 *
 * @author Admin
 */
public class typeTableManagerJDialog extends javax.swing.JDialog {

    private TableTypeDAO dao;
    private List<TableType> tableTypes;
    private int index = -1;

    /**
     * Creates new form typeTableManagerJDialog
     */
    public typeTableManagerJDialog() {
        initComponents();
        XUI.setupUI(this);
        XUI.setHandCursor(this);
        dao = new TableTypeDAOImpl();
        
        // Thêm sự kiện focus để tự động sinh mã
        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtId.getText().trim().isEmpty()) {
                    generateAutoCode();
                }
            }
        });
        
        // Thêm sự kiện tìm kiếm tự động khi nhập text
        txtTkiem1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                // Tìm kiếm tự động sau khi người dùng ngừng nhập
                if (evt.getKeyCode() != java.awt.event.KeyEvent.VK_ENTER) {
                    performAutoSearch();
                }
            }
        });
        
        this.fillToTable();
    }

    /**
     * Creates new form typeTableManagerJDialog with parent frame
     */
    public typeTableManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        XUI.setupUI(this);
        XUI.setHandCursor(this);
        dao = new TableTypeDAOImpl();
        
        // Thêm sự kiện focus để tự động sinh mã
        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtId.getText().trim().isEmpty()) {
                    generateAutoCode();
                }
            }
        });
        
        // Thêm sự kiện tìm kiếm tự động khi nhập text
        txtTkiem1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                // Tìm kiếm tự động sau khi người dùng ngừng nhập
                if (evt.getKeyCode() != java.awt.event.KeyEvent.VK_ENTER) {
                    performAutoSearch();
                }
            }
        });
        
        this.fillToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        txtTkiem1 = new javax.swing.JTextField();
        btnLamMoi1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLoaiBan1 = new javax.swing.JTable();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý loại bàn");

        txtTkiem1.setName(""); // NOI18N
        txtTkiem1.setPreferredSize(new java.awt.Dimension(200, 22));

        btnLamMoi1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoi1.setText("Làm mới");
        btnLamMoi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoi1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(186, Short.MAX_VALUE)
                .addComponent(txtTkiem1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLamMoi1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTkiem1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLamMoi1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblLoaiBan1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã loại", "Tên loại", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoaiBan1.setRowHeight(25);
        tblLoaiBan1.setRowMargin(1);
        tblLoaiBan1.setSelectionBackground(new java.awt.Color(255, 255, 0));
        tblLoaiBan1.setSelectionForeground(new java.awt.Color(255, 0, 0));
        tblLoaiBan1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblLoaiBan1.setShowGrid(true);
        
        // Thiết lập renderer cho cột mã loại (căn trái)
        tblLoaiBan1.getColumnModel().getColumn(0).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                javax.swing.JLabel label = (javax.swing.JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                return label;
            }
        });
        
        // Thiết lập renderer cho cột tên loại (căn trái)
        tblLoaiBan1.getColumnModel().getColumn(1).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                javax.swing.JLabel label = (javax.swing.JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                return label;
            }
        });
        
        // Thiết lập renderer cho cột checkbox
        tblLoaiBan1.getColumnModel().getColumn(2).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof Boolean) {
                    javax.swing.JCheckBox checkBox = new javax.swing.JCheckBox();
                    checkBox.setSelected((Boolean) value);
                    checkBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    return checkBox;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
        
        // Thiết lập renderer cho cột mã loại (cột 0) - căn lề trái
        tblLoaiBan1.getColumnModel().getColumn(0).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                javax.swing.JLabel label = (javax.swing.JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                return label;
            }
        });
        tblLoaiBan1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiBan1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblLoaiBan1);

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setText("Xóa các mục chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCheckAll)
                        .addGap(2, 2, 2)
                        .addComponent(btnUncheckAll)
                        .addGap(2, 2, 2)
                        .addComponent(btnDeleteCheckedItems))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 11, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 12, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCheckAll)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteCheckedItems))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 34, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 286, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("DANH SÁCH", jPanel1);

        btnCreate.setText("Tạo mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Nhập mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrevious.setText("<<");
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });

        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        jLabel1.setText("Mã loại");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        txtId.setEnabled(false);
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        jLabel2.setText("Tên loại bàn");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addGap(146, 146, 146)
                .addComponent(btnMoveFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMovePrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveLast)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnMoveFirst)
                    .addComponent(btnMovePrevious)
                    .addComponent(btnMoveNext)
                    .addComponent(btnMoveLast))
                .addContainerGap())
        );

        jTabbedPane1.addTab("BIỂU MẪU", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void btnLamMoi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoi1ActionPerformed
        // Xóa từ khóa tìm kiếm và làm mới bảng
        txtTkiem1.setText("");
        this.fillToTable();
        this.clear();
        
        // Tự động sinh mã mới sau khi làm mới
        String newCode = generateNewTableTypeCode();
        txtId.setText(newCode);
    }//GEN-LAST:event_btnLamMoi1ActionPerformed

    private void tblLoaiBan1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiBan1MouseClicked
        if (evt.getClickCount() == 2) {
            this.edit();
        }
    }//GEN-LAST:event_tblLoaiBan1MouseClicked

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(typeTableManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Tạo JFrame tạm thời làm parent cho JDialog
                javax.swing.JFrame tempFrame = new javax.swing.JFrame();
                tempFrame.setVisible(false);
                typeTableManagerJDialog dialog = new typeTableManagerJDialog(tempFrame, true);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnLamMoi1;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblLoaiBan1;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtTkiem1;
    // End of variables declaration//GEN-END:variables

    /**
     * Nạp dữ liệu vào bảng
     */
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblLoaiBan1.getModel();
        model.setRowCount(0);
        tableTypes = dao.findAll();
        
        for (int i = 0; i < tableTypes.size(); i++) {
            TableType tableType = tableTypes.get(i);
            // Hiển thị mã tự sinh thay vì ID thực
            String displayCode = String.format("%03d", i + 1);
            model.addRow(new Object[]{
                displayCode,
                tableType.getName(),
                Boolean.FALSE
            });
        }
    }

    /**
     * Chỉnh sửa loại bàn được chọn
     */
    public void edit() {
        if (tblLoaiBan1.getSelectedRow() >= 0) {
            index = tblLoaiBan1.getSelectedRow();
            TableType tableType = tableTypes.get(index);
            this.setForm(tableType);
            this.setEditable(true);
            jTabbedPane1.setSelectedIndex(1);
        }
    }

    /**
     * Chọn tất cả
     */
    public void checkAll() {
        setCheckedAll(true);
    }

    /**
     * Bỏ chọn tất cả
     */
    public void uncheckAll() {
        setCheckedAll(false);
    }

    /**
     * Thiết lập trạng thái chọn cho tất cả
     */
    private void setCheckedAll(boolean checked) {
        DefaultTableModel model = (DefaultTableModel) tblLoaiBan1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(checked ? Boolean.TRUE : Boolean.FALSE, i, 2);
        }
    }

    /**
     * Xóa các mục đã chọn
     */
    public void deleteCheckedItems() {
        DefaultTableModel model = (DefaultTableModel) tblLoaiBan1.getModel();
        List<Integer> rowsToDelete = new ArrayList<>();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 2);
            if (checked != null && checked) {
                rowsToDelete.add(i);
            }
        }
        
        if (rowsToDelete.isEmpty()) {
            XDialog.alert(this, "Vui lòng chọn ít nhất một loại bàn để xóa!");
            return;
        }
        
        boolean result = XDialog.confirm(this, "Bạn có chắc chắn muốn xóa " + rowsToDelete.size() + " loại bàn đã chọn?");
        if (result) {
                    for (int i = rowsToDelete.size() - 1; i >= 0; i--) {
            int rowIndex = rowsToDelete.get(i);
            // Lấy TableType từ danh sách gốc theo vị trí
            if (rowIndex < tableTypes.size()) {
                TableType tableType = tableTypes.get(rowIndex);
                dao.deleteById(tableType.getId());
            }
        }
            this.fillToTable();
            this.clear();
            
            // Cập nhật mã tự sinh sau khi xóa thành công
            String newCode = generateNewTableTypeCode();
            txtId.setText(newCode);
            
            XDialog.info(this, "Xóa thành công " + rowsToDelete.size() + " loại bàn!");
        }
    }

    /**
     * Tạo mới loại bàn
     */
    public void create() {
        try {
            TableType tableType = this.getForm();
            if (validateForm()) {
                dao.create(tableType);
                this.fillToTable();
                this.clear();
                
                // Cập nhật mã tự sinh sau khi tạo thành công
                String newCode = generateNewTableTypeCode();
                txtId.setText(newCode);
                
                XDialog.info(this, "Tạo mới loại bàn thành công!");
            }
        } catch (Exception e) {
            XDialog.alert(this, "Lỗi tạo mới loại bàn: " + e.getMessage());
        }
    }

    /**
     * Cập nhật loại bàn
     */
    public void update() {
        try {
            if (index < 0) {
                XDialog.alert(this, "Vui lòng chọn loại bàn cần cập nhật!");
                return;
            }
            
            if (validateForm()) {
                TableType tableType = tableTypes.get(index);
                TableType formData = this.getForm();
                
                tableType.setName(formData.getName());
                
                dao.update(tableType);
                this.fillToTable();
                this.clear();
                XDialog.info(this, "Cập nhật loại bàn thành công!");
            }
        } catch (Exception e) {
            XDialog.alert(this, "Lỗi cập nhật loại bàn: " + e.getMessage());
        }
    }

    /**
     * Xóa loại bàn
     */
    public void delete() {
        if (index < 0) {
            XDialog.alert(this, "Vui lòng chọn loại bàn cần xóa!");
            return;
        }
        
        boolean result = XDialog.confirm(this, "Bạn có chắc chắn muốn xóa loại bàn này?");
        if (result) {
            try {
                TableType tableType = tableTypes.get(index);
                dao.deleteById(tableType.getId());
                this.fillToTable();
                this.clear();
                
                // Cập nhật mã tự sinh sau khi xóa thành công
                String newCode = generateNewTableTypeCode();
                txtId.setText(newCode);
                
                XDialog.info(this, "Xóa loại bàn thành công!");
            } catch (Exception e) {
                XDialog.alert(this, "Lỗi xóa loại bàn: " + e.getMessage());
            }
        }
    }

    /**
     * Di chuyển đến loại bàn đầu tiên
     */
    public void moveFirst() {
        this.moveTo(0);
    }

    /**
     * Di chuyển đến loại bàn trước đó
     */
    public void movePrevious() {
        this.moveTo(index - 1);
    }

    /**
     * Di chuyển đến loại bàn tiếp theo
     */
    public void moveNext() {
        this.moveTo(index + 1);
    }

    /**
     * Di chuyển đến loại bàn cuối cùng
     */
    public void moveLast() {
        this.moveTo(tableTypes.size() - 1);
    }

    /**
     * Di chuyển đến loại bàn theo chỉ số
     */
    public void moveTo(int index) {
        if (index < 0) {
            this.moveLast();
        } else if (index >= tableTypes.size()) {
            this.moveFirst();
        } else {
            this.index = index;
            tblLoaiBan1.clearSelection();
            tblLoaiBan1.setRowSelectionInterval(index, index);
            this.edit();
        }
    }

    /**
     * Thiết lập dữ liệu vào form
     */
    public void setForm(TableType tableType) {
        // Hiển thị mã tự sinh thay vì ID thực từ database
        // Tìm vị trí của tableType trong danh sách để sinh mã
        int position = -1;
        for (int i = 0; i < tableTypes.size(); i++) {
            if (tableTypes.get(i).getId() == tableType.getId()) {
                position = i;
                break;
            }
        }
        
        if (position >= 0) {
            // Sinh mã dựa trên vị trí (bắt đầu từ 001)
            String displayCode = String.format("%03d", position + 1);
            txtId.setText(displayCode);
        } else {
            // Fallback: hiển thị ID thực nếu không tìm thấy
            txtId.setText(String.valueOf(tableType.getId()));
        }
        
        txtName.setText(tableType.getName());
    }

    /**
     * Lấy dữ liệu từ form
     */
    public TableType getForm() {
        TableType tableType = new TableType();
        // Không set ID từ form, để database tự động tăng
        // ID sẽ được database tự động gán
        tableType.setName(txtName.getText());
        return tableType;
    }

    /**
     * Xóa dữ liệu form
     */
    public void clear() {
        txtId.setText("");
        txtName.setText("");
        index = -1;
        jTabbedPane1.setSelectedIndex(0);
        
        // Tự động sinh mã mới khi xóa form
        String newCode = generateNewTableTypeCode();
        txtId.setText(newCode);
        
        // Enable chế độ tạo mới
        enableCreateMode();
    }

    /**
     * Kiểm tra tính hợp lệ của form
     */
    private boolean validateForm() {
        if (txtName.getText().trim().isEmpty()) {
            XDialog.alert(this, "Vui lòng nhập tên loại bàn!");
            txtName.requestFocus();
            return false;
        }
        
        return true;
    }

    /**
     * Thực hiện tìm kiếm tự động khi người dùng nhập text
     */
    private void performAutoSearch() {
        String keyword = txtTkiem1.getText().trim();
        
        if (keyword.isEmpty()) {
            // Nếu không có từ khóa, hiển thị tất cả
            fillToTable();
            
            // Cập nhật mã tự sinh sau khi làm mới
            String newCode = generateNewTableTypeCode();
            txtId.setText(newCode);
            return;
        }
        
        try {
            // Tìm kiếm thông minh theo tên loại bàn và mã loại
            List<TableType> searchResults = tableTypes.stream()
                .filter(tableType -> {
                    String name = tableType.getName().toLowerCase();
                    String id = String.valueOf(tableType.getId()).toLowerCase();
                    String searchTerm = keyword.toLowerCase();
                    
                    // Tìm kiếm theo tên loại bàn
                    boolean nameMatch = name.contains(searchTerm) || 
                                      name.startsWith(searchTerm) ||
                                      name.endsWith(searchTerm);
                    
                    // Tìm kiếm theo mã loại
                    boolean idMatch = id.contains(searchTerm);
                    
                    return nameMatch || idMatch;
                })
                .collect(Collectors.toList());

            // Hiển thị kết quả tìm kiếm
            DefaultTableModel model = (DefaultTableModel) tblLoaiBan1.getModel();
            model.setRowCount(0);
            
            for (int i = 0; i < searchResults.size(); i++) {
                TableType tableType = searchResults.get(i);
                // Tìm vị trí của tableType trong danh sách gốc để sinh mã
                int position = tableTypes.indexOf(tableType);
                String displayCode = position >= 0 ? String.format("%03d", position + 1) : String.valueOf(tableType.getId());
                
                model.addRow(new Object[]{
                    displayCode,
                    tableType.getName(),
                    Boolean.FALSE
                });
            }

        } catch (Exception e) {
            // Không hiển thị lỗi cho tìm kiếm tự động
        }
    }

    /**
     * Thiết lập trạng thái có thể chỉnh sửa
     */
    public void setEditable(boolean editable) {
        txtId.setEnabled(false); // ID không được sửa
        txtName.setEnabled(editable);
        
        btnCreate.setEnabled(!editable);
        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);
        
        int rowCount = tblLoaiBan1.getRowCount();
        btnMoveFirst.setEnabled(editable && rowCount > 0);
        btnMovePrevious.setEnabled(editable && rowCount > 0);
        btnMoveNext.setEnabled(editable && rowCount > 0);
        btnMoveLast.setEnabled(editable && rowCount > 0);
    }
    
    /**
     * Enable chế độ tạo mới
     */
    private void enableCreateMode() {
        txtId.setEnabled(false); // ID không được sửa
        txtName.setEnabled(true);
        
        btnCreate.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        
        btnMoveFirst.setEnabled(false);
        btnMovePrevious.setEnabled(false);
        btnMoveNext.setEnabled(false);
        btnMoveLast.setEnabled(false);
    }
    
    /**
     * Sinh mã tự động cho loại bàn mới
     */
    private void generateAutoCode() {
        // Cập nhật danh sách tableTypes từ database trước khi sinh mã
        tableTypes = dao.findAll();
        
        // Mã mới = số lượng hiện có + 1 (bắt đầu từ 001)
        int newPosition = tableTypes.size() + 1;
        
        // Format thành 3 chữ số với số 0 ở đầu
        String newCode = String.format("%03d", newPosition);
        txtId.setText(newCode);
    }
    
    /**
     * Sinh mã mới cho loại bàn dựa vào số lượng hiện có
     * @return Mã mới
     */
    private String generateNewTableTypeCode() {
        // Cập nhật danh sách tableTypes từ database trước khi sinh mã
        tableTypes = dao.findAll();
        
        // Mã mới = số lượng hiện có + 1 (bắt đầu từ 001)
        int newPosition = tableTypes.size() + 1;
        
        // Format thành 3 chữ số với số 0 ở đầu
        return String.format("%03d", newPosition);
    }
}
