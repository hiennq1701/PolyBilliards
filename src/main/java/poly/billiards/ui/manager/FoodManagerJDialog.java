/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.billiards.ui.manager;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import poly.billiards.dao.FoodCategoryDAO;
import poly.billiards.dao.FoodDAO;
import poly.billiards.dao.impl.FoodCategoryDAOImpl;
import poly.billiards.dao.impl.FoodDAOImpl;
import poly.billiards.entity.FoodCategory;
import poly.billiards.entity.Food;
import poly.billiards.util.XDialog;
import poly.billiards.util.XIcon;
import poly.billiards.util.XExcel;
import poly.billiards.util.XUI;
import poly.billiards.util.AutoCodeGenerator;
import poly.billiards.util.XValidation;

/**
 *
 * @author DELL
 */
public class FoodManagerJDialog extends javax.swing.JDialog implements FoodController {

    /**
     * Creates new form DrinkJDialog
     */
    public FoodManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        XUI.setupUI(this);
        XUI.setHandCursor(this);
        dao = new FoodDAOImpl();
        this.fillToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        lblImage = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrinks = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        sliDiscount = new poly.billiards.ui.component.SliderJPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboCategories = new javax.swing.JComboBox<>();
        rdoAvailable = new poly.billiards.ui.component.RadioJPanel();
        imgImage = new poly.billiards.ui.component.ImageJPanel();

        lblImage.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý đồ ăn");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        tblDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đồ ăn", "Tên đồ ăn", "Đơn giá", "Giảm giá", "Trạng thái", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDrinks.setRowHeight(25);
        tblDrinks.setRowMargin(1);
        tblDrinks.setSelectionBackground(new java.awt.Color(255, 255, 0));
        tblDrinks.setSelectionForeground(new java.awt.Color(255, 0, 0));
        tblDrinks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDrinks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDrinks.setShowGrid(true);
        tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrinksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDrinks);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 2));

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });
        jPanel3.add(btnCheckAll);

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });
        jPanel3.add(btnUncheckAll);

        btnDeleteCheckedItems.setText("Xóa các mục chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });
        jPanel3.add(btnDeleteCheckedItems);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 263));

        tblCategories.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tblCategories.setForeground(new java.awt.Color(0, 0, 255));
        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loại đồ ăn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCategories.setRowHeight(26);
        tblCategories.setRowMargin(2);
        tblCategories.setSelectionBackground(new java.awt.Color(204, 255, 204));
        tblCategories.setSelectionForeground(new java.awt.Color(255, 0, 0));
        tblCategories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCategories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCategories.setShowGrid(false);
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCategories);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.LINE_START);

        tabs.addTab("DANH SÁCH", jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.GridLayout(1, 0, 2, 2));

        btnCreate.setText("Tạo mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        jPanel7.add(btnCreate);

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel7.add(btnUpdate);

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel7.add(btnDelete);

        btnClear.setText("Nhập mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel7.add(btnClear);

        jPanel4.add(jPanel7, java.awt.BorderLayout.LINE_START);

        jPanel8.setLayout(new java.awt.GridLayout(1, 0, 2, 2));

        btnMoveFirst.setText("|<");
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });
        jPanel8.add(btnMoveFirst);

        btnMovePrevious.setText("<<");
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });
        jPanel8.add(btnMovePrevious);

        btnMoveNext.setText(">>");
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });
        jPanel8.add(btnMoveNext);

        btnMoveLast.setText(">|");
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });
        jPanel8.add(btnMoveLast);

        jPanel4.add(jPanel8, java.awt.BorderLayout.LINE_END);
        jPanel4.add(jSeparator1, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jPanel6.setLayout(new java.awt.GridLayout(0, 2, 5, 5));

        jLabel1.setText("Mã đồ ăn");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel1);

        jLabel2.setText("Tên đồ ăn");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel2);

        txtId.setEnabled(false);
        jPanel6.add(txtId);
        jPanel6.add(txtName);

        jLabel3.setText("Đơn giá");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel3);

        jLabel4.setText("Giảm giá");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel4);
        jPanel6.add(txtUnitPrice);
        jPanel6.add(sliDiscount);

        jLabel5.setText("Loại");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel5);

        jLabel6.setText("Trạng thái");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(jLabel6);
        jPanel6.add(cboCategories);

        rdoAvailable.setItems(new String[] {"Sẵn có", "Hết hàng"});
        jPanel6.add(rdoAvailable);

        imgImage.setFocusable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgImage, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        tabs.addTab("BIỂU MẪU", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblDrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDrinksMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.edit();
        }
    }//GEN-LAST:event_tblDrinksMouseClicked

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
        this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        // TODO add your handling code here:
        this.fillToTable();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (drinks == null || drinks.isEmpty()) {
                XDialog.alert(this, "Không có dữ liệu để xuất!");
                return;
            }
            XExcel.exportDrinks(drinks);
            XDialog.alert(this, "Xuất dữ liệu thành công!");
        } catch (IOException ex) {
            XDialog.alert(this, "Lỗi xuất dữ liệu: " + ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FoodManagerJDialog dialog = new FoodManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboCategories;
    private javax.swing.JFileChooser fileChooser;
    private poly.billiards.ui.component.ImageJPanel imgImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblImage;
    private poly.billiards.ui.component.RadioJPanel rdoAvailable;
    private poly.billiards.ui.component.SliderJPanel sliDiscount;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDrinks;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables

    private FoodDAO dao;
    private List<Food> drinks;

    List<FoodCategory> categories = List.of();

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategories();
        this.fillToTable();
        this.clear();
        
        // Đảm bảo mã được sinh chính xác dựa vào vị trí khi mở form
        String newCode = generateNewFoodCode();
        txtId.setText(newCode);
    }

    @Override
    public void fillCategories() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboCategories.getModel();
        cboModel.removeAllElements();

        DefaultTableModel tblModel = (DefaultTableModel) tblCategories.getModel();
        tblModel.setRowCount(0);

        FoodCategoryDAO cdao = new FoodCategoryDAOImpl();
        categories = cdao.findAll();

        categories.forEach(category -> {
            cboModel.addElement(category);
            tblModel.addRow(new Object[]{category.getName()});
        });

        if (tblCategories.getRowCount() > 0) {
            tblCategories.setRowSelectionInterval(0, 0);
        }
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
        model.setRowCount(0);
        
        // Cập nhật danh sách đồ ăn từ database
        drinks = dao.findAll();

        for (int i = 0; i < drinks.size(); i++) {
            Food food = drinks.get(i);
            
            // Cập nhật mã theo vị trí trong bảng
            String positionCode = String.format("%03d", i + 1);
            food.setId(positionCode);
            
            String unitPriceStr = (food.getUnitPrice() % 1 == 0)
                    ? String.valueOf((int) food.getUnitPrice())
                    : String.valueOf(food.getUnitPrice());

            String discountStr = (food.getDiscount() % 1 == 0)
                    ? String.valueOf((int) food.getDiscount())
                    : String.valueOf(food.getDiscount());

            model.addRow(new Object[]{
                positionCode, // Hiển thị mã theo vị trí
                food.getName(),
                unitPriceStr,
                discountStr,
                food.isAvailable() ? "Sẵn có" : "Hết hàng",
                false
            });
        }

        this.clear();
    }

    @Override
    public void edit() {
        Food entity = drinks.get(tblDrinks.getSelectedRow());
        this.setForm(entity);
        this.setEditable(true);
        tabs.setSelectedIndex(1);
    }

    @Override
    public void checkAll() {
        this.setCheckedAll(true);
    }

    @Override
    public void uncheckAll() {
        this.setCheckedAll(false);
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblDrinks.getRowCount(); i++) {
            tblDrinks.setValueAt(checked, i, 5);
        }
    }

    @Override
    public void deleteCheckedItems() {
        if (XDialog.confirm(this, "Bạn thực sự muốn xóa các mục chọn?")) {
            for (int i = 0; i < tblDrinks.getRowCount(); i++) {
                if ((Boolean) tblDrinks.getValueAt(i, 5)) {
                    dao.deleteById(drinks.get(i).getId());
                }
            }
            this.fillToTable();
        }
    }

    @Override
    public void setForm(Food entity) {
        txtId.setText(entity.getId());
        txtName.setText(entity.getName());
        txtUnitPrice.setText(String.valueOf(entity.getUnitPrice()));
        sliDiscount.setValue((int) (entity.getDiscount() * 100));
        imgImage.setIcon(entity.getImage());
        rdoAvailable.setIndex(entity.isAvailable() ? 0 : 1);

        // Only set category if there are categories and a valid selection
        if (!categories.isEmpty() && tblCategories.getSelectedRow() >= 0) {
            FoodCategory category = categories.get(tblCategories.getSelectedRow());
            cboCategories.setSelectedItem(category);
        }
    }

    @Override
    public Food getForm() {
        Food entity = new Food();
        
        // Chỉ set ID nếu không rỗng (trường hợp cập nhật)
        String id = txtId.getText().trim();
        if (!id.isEmpty()) {
            entity.setId(id);
        }
        
        entity.setName(txtName.getText().trim());
        entity.setDiscount(sliDiscount.getValue() / 100.0);
        
        // Parse giá với xử lý lỗi
        try {
            entity.setUnitPrice(Double.parseDouble(txtUnitPrice.getText().trim()));
        } catch (NumberFormatException e) {
            entity.setUnitPrice(0.0);
        }
        
        entity.setImage(imgImage.getIcon());
        entity.setAvailable(rdoAvailable.getIndex() == 0);
        
        // Kiểm tra index hợp lệ trước khi lấy category
        if (cboCategories.getSelectedIndex() >= 0 && cboCategories.getSelectedIndex() < categories.size()) {
            FoodCategory category = categories.get(cboCategories.getSelectedIndex());
            entity.setCategoryId(category.getId());
        }
        
        return entity;
    }

    @Override
    public void create() {
        // Validate dữ liệu trước khi tạo
        if (!validateForm()) {
            return;
        }
        
        // Tự động sinh mã cho đồ ăn mới dựa vào vị trí
        String newCode = generateNewFoodCode();
        
        Food entity = this.getForm();
        entity.setId(newCode);
        
        // Tạo đồ ăn với mã đã sinh
        dao.create(entity);
        this.fillToTable();
        this.clear();
        XDialog.alert(this, "Tạo đồ ăn thành công!");
    }

    @Override
    public void update() {
        // Validate dữ liệu trước khi cập nhật
        if (!validateForm()) {
            return;
        }
        
        Food entity = this.getForm();
        dao.update(entity);
        this.fillToTable();
        XDialog.alert(this, "Cập nhật đồ ăn thành công!");
    }

    @Override
    public void delete() {
        if (XDialog.confirm(this, "Bạn thực sự muốn xóa?")) {
            String id = txtId.getText();
            dao.deleteById(id);
            this.fillToTable();
            this.clear();
        }
    }

    @Override
    public void clear() {
        // Tạo entity mới với mã tự sinh dựa vào vị trí
        Food newFood = new Food();
        String newCode = generateNewFoodCode();
        newFood.setId(newCode);
        
        this.setForm(newFood);
        this.setEditable(false);
        
        // Đảm bảo mã được hiển thị đúng
        txtId.setText(newCode);
        
        // Focus vào trường tên đồ ăn
        txtName.requestFocus();
    }
    
    /**
     * Validate tất cả các trường dữ liệu trong form
     * @return true nếu tất cả đều hợp lệ
     */
    private boolean validateForm() {
        // Validate tên đồ ăn
        if (!XValidation.isValidRequired(txtName)) {
            return false;
        }
        
        // Kiểm tra tên đồ ăn không được trùng lặp
        String foodName = txtName.getText().trim();
        String currentId = txtId.getText().trim();
        
        for (Food food : drinks) {
            if (food.getName().equalsIgnoreCase(foodName) && !food.getId().equals(currentId)) {
                XDialog.alert(this, "Tên đồ ăn đã tồn tại!");
                txtName.requestFocus();
                return false;
            }
        }
        
        // Validate giá
        if (!XValidation.isValidRequired(txtUnitPrice)) {
            return false;
        }
        
        if (!XValidation.isValidPrice(txtUnitPrice)) {
            return false;
        }
        
        // Kiểm tra giá phải lớn hơn 0
        try {
            double price = Double.parseDouble(txtUnitPrice.getText().trim());
            if (price <= 0) {
                XDialog.alert(this, "Giá phải lớn hơn 0!");
                txtUnitPrice.requestFocus();
                return false;
            }
        } catch (NumberFormatException e) {
            XDialog.alert(this, "Giá không hợp lệ!");
            txtUnitPrice.requestFocus();
            return false;
        }
        
        // Validate danh mục
        if (!XValidation.isValidSelection(cboCategories)) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Sinh mã mới cho đồ ăn dựa vào vị trí trong bảng
     * @return Mã mới
     */
    private String generateNewFoodCode() {
        // Cập nhật danh sách đồ ăn từ database trước khi sinh mã
        drinks = dao.findAll();
        
        // Mã mới = vị trí hiện tại + 1 (bắt đầu từ 001)
        int newPosition = drinks.size() + 1;
        
        // Format thành 3 chữ số với số 0 ở đầu
        return String.format("%03d", newPosition);
    }

    @Override
    public void setEditable(boolean editable) {
        txtId.setEnabled(!editable);
        btnCreate.setEnabled(!editable);
        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);

        int rowCount = tblDrinks.getRowCount();
        btnMoveFirst.setEnabled(editable && rowCount > 0);
        btnMovePrevious.setEnabled(editable && rowCount > 0);
        btnMoveNext.setEnabled(editable && rowCount > 0);
        btnMoveLast.setEnabled(editable && rowCount > 0);
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        this.moveTo(tblDrinks.getSelectedRow() - 1);
    }

    @Override
    public void moveNext() {
        this.moveTo(tblDrinks.getSelectedRow() + 1);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblDrinks.getRowCount() - 1);
    }

    @Override
    public void moveTo(int index) {
        if (index < 0) {
            this.moveLast();
        } else if (index >= tblDrinks.getRowCount()) {
            this.moveFirst();
        } else {
            tblDrinks.clearSelection();
            tblDrinks.setRowSelectionInterval(index, index);
            this.edit();
        }
    }

    @Override
    public void chooseFile() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            File file = XIcon.copyTo(selectedFile, "images");
            lblImage.setToolTipText(file.getName());
            XIcon.setIcon(lblImage, file);
        }
    }

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            List<Food> importedDrinks = XExcel.importDrinks();
            if (importedDrinks != null && !importedDrinks.isEmpty()) {
                for (Food drink : importedDrinks) {
                    dao.create(drink);
                }
                XDialog.alert(this, "Nhập dữ liệu thành công!");
                fillToTable();
            }
        } catch (IOException ex) {
            XDialog.alert(this, "Lỗi nhập dữ liệu: " + ex.getMessage());
        }
    }

}
