/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.billiards.ui;

import com.raven.datechooser.DateBetween;
import com.raven.datechooser.DateChooser;
import com.raven.datechooser.listener.DateChooserAction;
import com.raven.datechooser.listener.DateChooserAdapter;
import java.awt.Frame;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowSorter;
import poly.billiards.dao.BillDAO;
import poly.billiards.entity.Bill;
import poly.billiards.util.TimeRange;
import poly.billiards.util.XAuth;
import poly.billiards.util.XDate;
import poly.billiards.util.XDialog;
import poly.billiards.entity.User;
import poly.billiards.util.XExcel;

/**
 *
 * @author DELL
 */
public class BillHistoryJDialog extends javax.swing.JDialog implements BillHistoryController {

    /**
     * Creates new form BillJDialog
     */
    private PolyBilliardsJFrame parentFrame;

    private DateChooser chDate = new DateChooser();

    public BillHistoryJDialog(PolyBilliardsJFrame parent, boolean modal) {
        super(parent, modal);
        this.parentFrame = parent;
        initComponents();

        chDate.setTextField(txtDate);
        chDate.setDateSelectionMode(DateChooser.DateSelectionMode.BETWEEN_DATE_SELECTED);
        chDate.setDateFormat(new SimpleDateFormat("dd-MM-yyyy"));
        chDate.addActionDateChooserListener(new DateChooserAdapter() {
            @Override
            public void dateBetweenChanged(DateBetween date, DateChooserAction action) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String dateFrom = df.format(date.getFromDate());
                String toDate = df.format(date.getToDate());
                Object filter = String.valueOf(cboFilter.getSelectedItem());
                if (Objects.equals(filter, "Thời điểm tạo")) {
                    loadBillsByDateCheckin(dateFrom, toDate);
                } else if (Objects.equals(filter, "Thời điểm thanh toán")) {
                    loadBillsByDateCheckout(dateFrom, toDate);
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        lbDoanhThuTitle = new javax.swing.JLabel();
        lbTongDoanhThu = new javax.swing.JLabel();
        cboFilter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        pnlFilterTime = new javax.swing.JPanel();
        btnLast28Days = new javax.swing.JButton();
        btnLastWeek = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();
        txtFilterUser = new javax.swing.JTextField();
        txtFilterTable = new javax.swing.JTextField();
        btnFilterShowAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lịch sử bán hàng của bạn");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hoá đơn", "Tên bàn", "Thời điểm tạo", "Thời điểm thanh toán", "Tổng tiền", "Người dùng", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBills.setRowHeight(25);
        tblBills.setRowMargin(2);
        tblBills.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBills.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBills.setShowGrid(true);
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBills);
        if (tblBills.getColumnModel().getColumnCount() > 0) {
            tblBills.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblBills.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setText("Xóa các mục chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        btnExport.setText("Xuất file Excel");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        lbDoanhThuTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbDoanhThuTitle.setText("Tổng doanh thu:");

        lbTongDoanhThu.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTongDoanhThu.setText("012345");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDoanhThuTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTongDoanhThu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                .addComponent(btnExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCheckAll)
                .addGap(2, 2, 2)
                .addComponent(btnUncheckAll)
                .addGap(2, 2, 2)
                .addComponent(btnDeleteCheckedItems))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbDoanhThuTitle)
                        .addComponent(lbTongDoanhThu))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCheckAll)
                        .addComponent(btnExport))
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteCheckedItems)))
        );

        cboFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thời điểm tạo", "Thời điểm thanh toán", "Người dùng", "Tên bàn" }));
        cboFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboFilterItemStateChanged(evt);
            }
        });

        jLabel1.setText("Lọc theo:");

        btnLast28Days.setText("Xem 28 ngày qua");
        btnLast28Days.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLast28DaysActionPerformed(evt);
            }
        });

        btnLastWeek.setText("Xem tuần qua");
        btnLastWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastWeekActionPerformed(evt);
            }
        });

        txtDate.setColumns(8);
        
        txtFilterUser.setColumns(8);
        txtFilterUser.setPreferredSize(new java.awt.Dimension(187, 27));
        txtFilterUser.setVisible(false);
        
        txtFilterTable.setColumns(8);
        txtFilterTable.setPreferredSize(new java.awt.Dimension(187, 27));
        txtFilterTable.setVisible(false);

        btnFilterShowAll.setText("Xem tất cả");
        btnFilterShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterShowAllActionPerformed(evt);
            }
        });
        
        // Thiết lập auto-search
        setupAutoSearch();
        
        // Thiết lập TableRowSorter cho tblBills
        setupTableSorter();

        javax.swing.GroupLayout pnlFilterTimeLayout = new javax.swing.GroupLayout(pnlFilterTime);
        pnlFilterTime.setLayout(pnlFilterTimeLayout);
        pnlFilterTimeLayout.setHorizontalGroup(
            pnlFilterTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFilterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFilterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLastWeek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLast28Days)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFilterShowAll)
                .addContainerGap())
        );
        pnlFilterTimeLayout.setVerticalGroup(
            pnlFilterTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFilterTimeLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlFilterTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilterTable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLastWeek)
                    .addComponent(btnLast28Days)
                    .addComponent(btnFilterShowAll)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlFilterTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(pnlFilterTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblBillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.showBillJDialog();
        }
    }//GEN-LAST:event_tblBillsMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnLast28DaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLast28DaysActionPerformed
        // TODO add your handling code here:
        chDate.setSelectedDateBetween(new DateBetween(getLast28days(), new Date()));
    }//GEN-LAST:event_btnLast28DaysActionPerformed

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void btnLastWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastWeekActionPerformed
        // TODO add your handling code here:
        chDate.setSelectedDateBetween(new DateBetween(getLastWeek(), new Date()));
    }//GEN-LAST:event_btnLastWeekActionPerformed

         private void cboFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboFilterItemStateChanged
         // Fallback method
         if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
             handleFilterChange();
         }
     }//GEN-LAST:event_cboFilterItemStateChanged

    private void btnFilterShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterShowAllActionPerformed
        // TODO add your handling code here:
        loadBillsByPermission();
    }//GEN-LAST:event_btnFilterShowAllActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        try {
            if (bills == null || bills.isEmpty()) {
                XDialog.alert(this, "Không có dữ liệu để xuất!");
                return;
            }
            XExcel.exportBills(bills);
            XDialog.info(this, "Xuất dữ liệu thành công!");
        } catch (IOException ex) {
            XDialog.alert(this, "Lỗi xuất dữ liệu: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillHistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillHistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillHistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillHistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BillHistoryJDialog dialog = new BillHistoryJDialog(null, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFilterShowAll;
    private javax.swing.JButton btnLast28Days;
    private javax.swing.JButton btnLastWeek;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JComboBox<String> cboFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDoanhThuTitle;
    private javax.swing.JLabel lbTongDoanhThu;
    private javax.swing.JPanel pnlFilterTime;
    private javax.swing.JTable tblBills;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFilterUser;
    private javax.swing.JTextField txtFilterTable;
    // End of variables declaration//GEN-END:variables

    BillDAO billDao = new BillDAO();
    List<Bill> bills = List.of();

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        checkManagerPermission();
        setupFilterByPermission();
        loadBillsByPermission();
    }

    public void fillBills(String sql) {
        // Lấy dữ liệu từ database
        bills = billDao.selectBySQL(sql);

        // Debug log
        System.out.println("SQL Query: " + sql);
        System.out.println("Number of bills loaded: " + bills.size());
        for (Bill bill : bills) {
            System.out.println("Bill ID: " + bill.getId()
                    + ", TotalPrice: " + bill.getTotalPrice()
                    + ", Status: " + bill.getStatus());
        }

        // Đổ dữ liệu vào bảng
        DefaultTableModel model = (DefaultTableModel) tblBills.getModel();
        model.setRowCount(0);
        for (Bill bill : bills) {
            Object[] row = {
                bill.getId(),
                bill.getTableName() != null ? bill.getTableName() : "Bàn " + bill.getIdtable(),
                bill.getDatecheckin() != null ? XDate.format(bill.getDatecheckin(), "dd-MM-yyyy HH:mm:ss") : "",
                bill.getDatecheckout() != null ? XDate.format(bill.getDatecheckout(), "dd-MM-yyyy HH:mm:ss") : "",
                bill.getTotalPrice(),
                bill.getUsername() != null ? bill.getUsername() : ""
            };
            model.addRow(row);
        }

        // Tính tổng doanh thu sau khi load dữ liệu
        calculateTotalRevenue();
        
        // Đảm bảo sorter được áp dụng sau khi load dữ liệu mới
        if (tblBills.getRowSorter() != null) {
            tblBills.getRowSorter().allRowsChanged();
        }
    }

    @Override
    public void showBillJDialog() {
        int row = tblBills.getSelectedRow();
        if (row >= 0 && parentFrame != null) {
            Bill bill = bills.get(row);
            parentFrame.showBillDetail(bill);
            this.dispose();
        }
    }

    private Date getLast28days() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -28);
        return cal.getTime();
    }

    private Date getLastWeek() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -7);
        return cal.getTime();
    }

    @Override
    public void selectTimeRange() {
        // Có thể để trống hoặc thêm logic chọn khoảng thời gian
        // Hiện tại đã có DateChooser để chọn thời gian
    }

    @Override
    public void fillBills() {
        loadBillsByPermission();
    }

    public void checkAll() {
        this.setCheckedAll(true);
    }

    public void uncheckAll() {
        this.setCheckedAll(false);
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblBills.getRowCount(); i++) {
            tblBills.setValueAt(checked, i, 6);
        }
    }

    public void deleteCheckedItems() {
        if (XDialog.confirm(this, "Bạn thực sự muốn xóa các mục chọn?")) {
            int deletedCount = 0;
            List<Integer> idsToDelete = new ArrayList<>();

            // Thu thập các ID cần xóa
            for (int i = 0; i < tblBills.getRowCount(); i++) {
                Boolean isChecked = (Boolean) tblBills.getValueAt(i, 6);
                System.out.println("Row " + i + ": checked = " + isChecked);
                if (isChecked != null && isChecked) {
                    Integer id = bills.get(i).getId();
                    System.out.println("Will delete category with ID: " + id);
                    idsToDelete.add(id);
                }
            }

            // Thực hiện xóa
            for (Integer id : idsToDelete) {
                billDao.deleteFromBillDeleted(id);
                deletedCount++;
            }

            System.out.println("Total deleted: " + deletedCount);
            this.loadBillsByPermission();
            if (deletedCount > 0) {
                XDialog.info(this, "Đã xóa " + deletedCount + " mục được chọn!");
            } else {
                XDialog.alert(this, "Không có mục nào được chọn để xóa!");
            }
        }
    }

    /**
     * Kiểm tra quyền Manager và ẩn/hiện các nút xóa hàng loạt
     */
    private void checkManagerPermission() {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (currentUser.isManager()) {
                // Manager: hiện tất cả các nút
                btnCheckAll.setVisible(true);
                btnUncheckAll.setVisible(true);
                btnDeleteCheckedItems.setVisible(true);
                btnExport.setVisible(true);
            } else {
                // Non-manager: chỉ ẩn 3 nút này
                btnCheckAll.setVisible(false);
                btnUncheckAll.setVisible(false);
                btnDeleteCheckedItems.setVisible(false);
                btnExport.setVisible(false);
            }
        } else {
            // Fallback: ẩn 3 nút nếu không có thông tin user
            btnCheckAll.setVisible(false);
            btnUncheckAll.setVisible(false);
            btnDeleteCheckedItems.setVisible(false);
            btnExport.setVisible(false);
        }
    }

    /**
     * Load bill theo quyền của user
     */
    private void loadBillsByPermission() {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (currentUser.isManager()) {
                // Nếu là Manager, hiện tất cả bill
                this.fillBills("SELECT * FROM BillDeleted");
            } else {
                // Nếu không phải Manager, chỉ hiện bill của user đó
                this.fillBills("SELECT * FROM BillDeleted WHERE Username = '" + currentUser.getUsername() + "'");
            }
        } else {
            // Nếu không có thông tin user, hiện tất cả để an toàn
            this.fillBills("SELECT * FROM BillDeleted");
        }
    }

    /**
     * Load bill theo khoảng thời gian checkin và quyền của user
     */
    private void loadBillsByDateCheckin(String dateFrom, String toDate) {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (currentUser.isManager()) {
                // Nếu là Manager, hiện tất cả bill trong khoảng thời gian
                this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckin >='" + dateFrom + "' AND DateCheckin <= '" + toDate + "'");
            } else {
                // Nếu không phải Manager, chỉ hiện bill của user đó trong khoảng thời gian
                this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckin >='" + dateFrom + "' AND DateCheckin <= '" + toDate + "' AND Username = '" + currentUser.getUsername() + "'");
            }
        } else {
            // Nếu không có thông tin user, hiện tất cả trong khoảng thời gian
            this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckin >='" + dateFrom + "' AND DateCheckin <= '" + toDate + "'");
        }
    }
    
    /**
     * Load bill theo khoảng thời gian checkout và quyền của user
     */
    private void loadBillsByDateCheckout(String dateFrom, String toDate) {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (currentUser.isManager()) {
                // Nếu là Manager, hiện tất cả bill trong khoảng thời gian
                this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckout >='" + dateFrom + "' AND DateCheckout <= '" + toDate + "'");
            } else {
                // Nếu không phải Manager, chỉ hiện bill của user đó trong khoảng thời gian
                this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckout >='" + dateFrom + "' AND DateCheckout <= '" + toDate + "' AND Username = '" + currentUser.getUsername() + "'");
            }
        } else {
            // Nếu không có thông tin user, hiện tất cả trong khoảng thời gian
            this.fillBills("SELECT * FROM BillDeleted WHERE DateCheckout >='" + dateFrom + "' AND DateCheckout <= '" + toDate + "'");
        }
    }

    /**
     * Tính tổng doanh thu từ dữ liệu trong bảng
     */
    private void calculateTotalRevenue() {
        double totalRevenue = 0.0;

        // Duyệt qua tất cả các dòng trong bảng
        for (int i = 0; i < tblBills.getRowCount(); i++) {
            Object value = tblBills.getValueAt(i, 4); // Cột "Tổng tiền" (index 4)

            // Xử lý các kiểu dữ liệu khác nhau
            if (value instanceof Float) {
                totalRevenue += (Float) value;
            } else if (value instanceof Double) {
                totalRevenue += (Double) value;
            } else if (value instanceof Integer) {
                totalRevenue += (Integer) value;
            } else if (value instanceof String) {
                try {
                    // Loại bỏ ký tự đặc biệt và chuyển đổi
                    String cleanValue = ((String) value).replaceAll("[^0-9.]", "");
                    if (!cleanValue.isEmpty()) {
                        totalRevenue += Double.parseDouble(cleanValue);
                    }
                } catch (NumberFormatException e) {
                    // Bỏ qua nếu không parse được
                }
            }
        }

                 // Format và hiển thị kết quả
         String formattedRevenue = String.format("%,.0f VNĐ", totalRevenue);
         lbTongDoanhThu.setText(formattedRevenue);
     }
     
     /**
      * Xử lý thay đổi filter selection
      */
     private void handleFilterChange() {
         String selectedFilter = String.valueOf(cboFilter.getSelectedItem());
         System.out.println("Filter changed to: " + selectedFilter);
         
         if ("Người dùng".equals(selectedFilter)) {
             System.out.println("Showing user filter");
             // Ẩn time filter components
             btnLastWeek.setVisible(false);
             btnLast28Days.setVisible(false);
             txtDate.setVisible(false);
             
             // Hiện user filter
             txtFilterUser.setVisible(true);
             txtFilterTable.setVisible(false);
             
         } else if ("Tên bàn".equals(selectedFilter)) {
             System.out.println("Showing table filter");
             // Ẩn time filter components
             btnLastWeek.setVisible(false);
             btnLast28Days.setVisible(false);
             txtDate.setVisible(false);
             
             // Hiện table filter
             txtFilterUser.setVisible(false);
             txtFilterTable.setVisible(true);
             
         } else {
             System.out.println("Showing time filter");
             // Hiện lại time filter components
             btnLastWeek.setVisible(true);
             btnLast28Days.setVisible(true);
             txtDate.setVisible(true);
             
             // Ẩn filter components
             txtFilterUser.setVisible(false);
             txtFilterTable.setVisible(false);
         }
         
         // Force layout update
         javax.swing.SwingUtilities.invokeLater(() -> {
             pnlFilterTime.revalidate();
             pnlFilterTime.repaint();
         });
     }
     
     /**
      * Thiết lập auto-search cho các text field
      */
     private void setupAutoSearch() {
         // Cho txtFilterUser
         txtFilterUser.getDocument().addDocumentListener(new DocumentListener() {
             @Override
             public void insertUpdate(DocumentEvent e) { searchByUser(); }
             @Override
             public void removeUpdate(DocumentEvent e) { searchByUser(); }
             @Override
             public void changedUpdate(DocumentEvent e) { searchByUser(); }
         });
         
         // Cho txtFilterTable
         txtFilterTable.getDocument().addDocumentListener(new DocumentListener() {
             @Override
             public void insertUpdate(DocumentEvent e) { searchByTable(); }
             @Override
             public void removeUpdate(DocumentEvent e) { searchByTable(); }
             @Override
             public void changedUpdate(DocumentEvent e) { searchByTable(); }
         });
     }
     
     /**
      * Tìm kiếm theo tên người dùng
      */
     private void searchByUser() {
         String searchText = txtFilterUser.getText().trim();
         if (searchText.isEmpty()) {
             loadBillsByPermission();
         } else {
             loadBillsByUser(searchText);
         }
     }
     
     /**
      * Tìm kiếm theo tên bàn
      */
     private void searchByTable() {
         String searchText = txtFilterTable.getText().trim();
         if (searchText.isEmpty()) {
             loadBillsByPermission();
         } else {
             loadBillsByTableName(searchText);
         }
     }
     
     /**
      * Load bill theo tên người dùng và quyền
      */
     private void loadBillsByUser(String username) {
         if (parentFrame != null && parentFrame.getCurrentUser() != null) {
             User currentUser = parentFrame.getCurrentUser();
             if (currentUser.isManager()) {
                 // Nếu là Manager, hiện tất cả bill theo username
                 this.fillBills("SELECT * FROM BillDeleted WHERE Username LIKE '%" + username + "%'");
             } else {
                 // Nếu không phải Manager, chỉ hiện bill của user đó theo username
                 this.fillBills("SELECT * FROM BillDeleted WHERE Username LIKE '%" + username + "%' AND Username = '" + currentUser.getUsername() + "'");
             }
         } else {
             // Nếu không có thông tin user, hiện tất cả theo username
             this.fillBills("SELECT * FROM BillDeleted WHERE Username LIKE '%" + username + "%'");
         }
     }
     
         /**
     * Load bill theo tên bàn và quyền
     */
    private void loadBillsByTableName(String tableName) {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (currentUser.isManager()) {
                // Nếu là Manager, hiện tất cả bill theo table name
                this.fillBills("SELECT * FROM BillDeleted WHERE TableName LIKE '%" + tableName + "%'");
            } else {
                // Nếu không phải Manager, chỉ hiện bill của user đó theo table name
                this.fillBills("SELECT * FROM BillDeleted WHERE TableName LIKE '%" + tableName + "%' AND Username = '" + currentUser.getUsername() + "'");
            }
        } else {
            // Nếu không có thông tin user, hiện tất cả theo table name
            this.fillBills("SELECT * FROM BillDeleted WHERE TableName LIKE '%" + tableName + "%'");
        }
    }
    
    /**
     * Thiết lập filter theo quyền của user
     */
    private void setupFilterByPermission() {
        if (parentFrame != null && parentFrame.getCurrentUser() != null) {
            User currentUser = parentFrame.getCurrentUser();
            if (!currentUser.isManager()) {
                // Nếu không phải Manager, bỏ item "Người dùng" khỏi cboFilter
                javax.swing.DefaultComboBoxModel<String> model = new javax.swing.DefaultComboBoxModel<>();
                model.addElement("Thời điểm tạo");
                model.addElement("Thời điểm thanh toán");
                model.addElement("Tên bàn");
                cboFilter.setModel(model);
                
                // Đặt lại selection về item đầu tiên
                cboFilter.setSelectedIndex(0);
            }
        }
    }
    
    /**
     * Thiết lập TableRowSorter cho tblBills
     */
    private void setupTableSorter() {
        DefaultTableModel model = (DefaultTableModel) tblBills.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblBills.setRowSorter(sorter);
        
        // Thiết lập comparator tùy chỉnh cho cột Mã hoá đơn (cột 0)
        sorter.setComparator(0, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                if (o1 instanceof Long && o2 instanceof Long) {
                    return Long.compare((Long) o1, (Long) o2);
                }
                return o1.toString().compareTo(o2.toString());
            }
        });
        
        // Thiết lập comparator cho cột Tên bàn (cột 1)
        sorter.setComparator(1, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                String s1 = o1.toString();
                String s2 = o2.toString();
                return s1.compareToIgnoreCase(s2); // So sánh không phân biệt hoa thường
            }
        });
        
        // Thiết lập comparator cho cột Thời điểm tạo (cột 2)
        sorter.setComparator(2, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                String s1 = o1.toString();
                String s2 = o2.toString();
                return s1.compareTo(s2); // So sánh theo thứ tự thời gian
            }
        });
        
        // Thiết lập comparator cho cột Thời điểm thanh toán (cột 3)
        sorter.setComparator(3, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                String s1 = o1.toString();
                String s2 = o2.toString();
                return s1.compareTo(s2); // So sánh theo thứ tự thời gian
            }
        });
        
        // Thiết lập comparator cho cột Tổng tiền (cột 4)
        sorter.setComparator(4, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                if (o1 instanceof Long && o2 instanceof Long) {
                    return Long.compare((Long) o1, (Long) o2);
                } else if (o1 instanceof Integer && o2 instanceof Integer) {
                    return Integer.compare((Integer) o1, (Integer) o2);
                } else if (o1 instanceof Double && o2 instanceof Double) {
                    return Double.compare((Double) o1, (Double) o2);
                } else if (o1 instanceof Float && o2 instanceof Float) {
                    return Float.compare((Float) o1, (Float) o2);
                }
                return o1.toString().compareTo(o2.toString());
            }
        });
        
        // Thiết lập comparator cho cột Người dùng (cột 5)
        sorter.setComparator(5, new java.util.Comparator<Object>() {
            @Override
            public int compare(Object o1, Object o2) {
                String s1 = o1.toString();
                String s2 = o2.toString();
                return s1.compareToIgnoreCase(s2); // So sánh không phân biệt hoa thường
            }
        });
        
        System.out.println("TableRowSorter đã được thiết lập cho tblBills");
    }
}
